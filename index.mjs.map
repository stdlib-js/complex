{"version":3,"file":"index.mjs","sources":["../base/cast-return/lib/main.js","../base/wrap-function/lib/main.js","../base/lib/index.js","../float32/ctor/lib/main.js","../float64/ctor/lib/main.js","../float32/ctor/lib/tostring.js","../float32/ctor/lib/tojson.js","../float64/ctor/lib/tostring.js","../float64/ctor/lib/tojson.js","../ctors/lib/ctors.js","../ctors/lib/main.js","../cmplx/lib/main.js","../dtype/lib/ctor2dtype.js","../dtypes/lib/main.js","../dtype/lib/dtypes.js","../dtype/lib/ctors.js","../dtype/lib/main.js","../float32/real/lib/main.js","../float32/imag/lib/main.js","../float32/reim/lib/main.js","../float32/base/assert/lib/index.js","../float32/base/mul/lib/main.js","../float32/base/scale/lib/main.js","../float32/base/assert/is-equal/lib/main.js","../float32/base/assert/is-not-equal/lib/main.js","../float32/base/assert/is-same-value/lib/main.js","../float32/base/assert/is-same-value-zero/lib/main.js","../float32/base/mul/lib/index.js","../float32/base/mul/lib/assign.js","../float32/base/mul/lib/strided.js","../float32/base/scale/lib/index.js","../float32/base/scale/lib/assign.js","../float32/base/scale/lib/strided.js","../float32/base/lib/index.js","../float32/base/add/lib/main.js","../float32/base/identity/lib/main.js","../float32/base/neg/lib/main.js","../float32/base/sub/lib/main.js","../float32/lib/index.js","../float64/real/lib/main.js","../float64/imag/lib/main.js","../float64/base/add/lib/main.js","../float64/reim/lib/main.js","../float32/conj/lib/main.js","../float32/parse/lib/main.js","../float32/reviver/lib/main.js","../float64/base/add/lib/index.js","../float64/base/add/lib/assign.js","../float64/base/add/lib/strided.js","../float64/base/assert/lib/index.js","../float64/base/mul/lib/main.js","../float64/base/mul-add/lib/main.js","../float64/base/scale/lib/main.js","../float64/base/assert/is-equal/lib/main.js","../float64/base/assert/is-not-equal/lib/main.js","../float64/base/assert/is-same-value/lib/main.js","../float64/base/assert/is-same-value-zero/lib/main.js","../float64/base/mul/lib/index.js","../float64/base/mul/lib/assign.js","../float64/base/mul/lib/strided.js","../float64/base/mul-add/lib/index.js","../float64/base/mul-add/lib/assign.js","../float64/base/mul-add/lib/strided.js","../float64/base/scale/lib/index.js","../float64/base/scale/lib/assign.js","../float64/base/scale/lib/strided.js","../float64/base/lib/index.js","../float64/lib/index.js","../float64/conj/lib/main.js","../float64/parse/lib/main.js","../float64/reviver/lib/main.js","../promotion-rules/lib/main.js","../reviver/lib/ctors.js","../reviver/lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable valid-typeof */\n\n'use strict';\n\n// MODULES //\n\nimport isFunction from '@stdlib/assert/is-function';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert/is-nonnegative-integer';\nimport format from '@stdlib/string/format';\n\n\n// VARIABLES //\n\nvar T = 'number';\n\n\n// FUNCTIONS //\n\n/**\n* Wraps a function and casts a function's return value to a complex number.\n*\n* ## Notes\n*\n* -   The returned function **assumes** that the wrapped function returns either a real or complex number.\n* -   The returned function **assumes** that, if a return value is non-numeric (i.e., not of type `number`), then the return value is a complex number. The returned function does **not** verify that non-numeric return values are, in fact, complex number objects. The returned function returns non-numeric return values from the wrapped function without modification.\n*\n* @param {Function} fcn - function to wrap\n* @param {NonNegativeInteger} nargs - number of arguments\n* @param {Function} ctor - complex number constructor\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} second argument must be a nonnegative integer\n* @throws {TypeError} third argument must be a constructor function\n* @returns {Function} wrapped function\n*\n* @example\n* import Complex64 from '@stdlib/complex/float32/ctor';\n* import addf from '@stdlib/number/float32/base/add';\n* import realf from '@stdlib/complex/float32/real';\n* import imagf from '@stdlib/complex/float32/imag';\n*\n* var f = wrap( addf, 2, Complex64 );\n*\n* // ...\n*\n* var z = f( 3.0, 4.0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 7.0\n*\n* var im = imagf( z );\n* // returns 0.0\n*/\nfunction wrap( fcn, nargs, ctor ) {\n\tvar fcns;\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', fcn ) );\n\t}\n\tif ( !isNonNegativeInteger( nargs ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a nonnegative integer. Value: `%s`.', nargs ) );\n\t}\n\tif ( !isFunction( ctor ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a constructor function. Value: `%s`.', ctor ) );\n\t}\n\tfcns = [ fcn0, fcn1, fcn2, fcn3, fcn4, fcn5 ];\n\treturn ( nargs <= 5 ) ? fcns[ nargs ] : fcnN;\n\n\t/**\n\t* Invokes a nullary function and returns a complex number.\n\t*\n\t* @private\n\t* @returns {Complex} result\n\t*/\n\tfunction fcn0() {\n\t\tvar r = fcn();\n\t\tif ( typeof r === T ) {\n\t\t\treturn new ctor( r, 0.0 );\n\t\t}\n\t\treturn r;\n\t}\n\n\t/**\n\t* Invokes a unary function and returns a complex number.\n\t*\n\t* @private\n\t* @param {*} x - input value\n\t* @returns {Complex} result\n\t*/\n\tfunction fcn1( x ) {\n\t\tvar r = fcn( x );\n\t\tif ( typeof r === T ) {\n\t\t\treturn new ctor( r, 0.0 );\n\t\t}\n\t\treturn r;\n\t}\n\n\t/**\n\t* Invokes a binary function and returns a complex number.\n\t*\n\t* @private\n\t* @param {*} x - input value\n\t* @param {*} y - input value\n\t* @returns {Complex} result\n\t*/\n\tfunction fcn2( x, y ) {\n\t\tvar r = fcn( x, y );\n\t\tif ( typeof r === T ) {\n\t\t\treturn new ctor( r, 0.0 );\n\t\t}\n\t\treturn r;\n\t}\n\n\t/**\n\t* Invokes a ternary function and returns a complex number.\n\t*\n\t* @private\n\t* @param {*} x - input value\n\t* @param {*} y - input value\n\t* @param {*} z - input value\n\t* @returns {Complex} result\n\t*/\n\tfunction fcn3( x, y, z ) {\n\t\tvar r = fcn( x, y, z );\n\t\tif ( typeof r === T ) {\n\t\t\treturn new ctor( r, 0.0 );\n\t\t}\n\t\treturn r;\n\t}\n\n\t/**\n\t* Invokes a quaternary function and returns a complex number.\n\t*\n\t* @private\n\t* @param {*} x - input value\n\t* @param {*} y - input value\n\t* @param {*} z - input value\n\t* @param {*} w - input value\n\t* @returns {Complex} result\n\t*/\n\tfunction fcn4( x, y, z, w ) {\n\t\tvar r = fcn( x, y, z, w );\n\t\tif ( typeof r === T ) {\n\t\t\treturn new ctor( r, 0.0 );\n\t\t}\n\t\treturn r;\n\t}\n\n\t/**\n\t* Invokes a quinary function and returns a complex number.\n\t*\n\t* @private\n\t* @param {*} x - input value\n\t* @param {*} y - input value\n\t* @param {*} z - input value\n\t* @param {*} w - input value\n\t* @param {*} v - input value\n\t* @returns {Complex} result\n\t*/\n\tfunction fcn5( x, y, z, w, v ) {\n\t\tvar r = fcn( x, y, z, w, v );\n\t\tif ( typeof r === T ) {\n\t\t\treturn new ctor( r, 0.0 );\n\t\t}\n\t\treturn r;\n\t}\n\n\t/**\n\t* Invokes a function and returns a complex number.\n\t*\n\t* @private\n\t* @param {...*} args - input values\n\t* @returns {Complex} result\n\t*/\n\tfunction fcnN() {\n\t\tvar args;\n\t\tvar r;\n\t\tvar i;\n\n\t\targs = [];\n\t\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\t\targs.push( arguments[ i ] );\n\t\t}\n\t\tr = fcn.apply( null, args );\n\t\tif ( typeof r === T ) {\n\t\t\treturn new ctor( r, 0.0 );\n\t\t}\n\t\treturn r;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default wrap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable valid-typeof */\n\n'use strict';\n\n// MODULES //\n\nimport isFunction from '@stdlib/assert/is-function';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert/is-nonnegative-integer';\nimport format from '@stdlib/string/format';\n\n\n// VARIABLES //\n\nvar T = 'number';\n\n\n// FUNCTIONS //\n\n/**\n* Wraps a function accepting complex number arguments to support providing both real and complex numbers.\n*\n* ## Notes\n*\n* -   The returned function **assumes** that the wrapped function accepts **only** complex number input arguments (i.e., every argument must be a complex number).\n* -   The returned function **assumes** that, if an input argument is non-numeric (i.e., not of type `number`), then the input argument is a complex number. The returned function does **not** verify that non-numeric input arguments are, in fact, complex number objects. The returned function passes non-numeric input arguments to the wrapped function without modification.\n*\n* @param {Function} fcn - function to wrap\n* @param {NonNegativeInteger} nargs - number of arguments\n* @param {Function} ctor - complex number constructor\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} second argument must be a nonnegative integer\n* @throws {TypeError} third argument must be a constructor function\n* @returns {Function} wrapped function\n*\n* @example\n* import Complex64 from '@stdlib/complex/float32/ctor';\n* import caddf from '@stdlib/complex/float32/base/add';\n* import realf from '@stdlib/complex/float32/real';\n* import imagf from '@stdlib/complex/float32/imag';\n*\n* var f = wrap( caddf, 2, Complex64 );\n*\n* // ...\n*\n* var z = f( 3.0, 4.0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 7.0\n*\n* var im = imagf( z );\n* // returns 0.0\n*/\nfunction wrap( fcn, nargs, ctor ) {\n\tvar fcns;\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', fcn ) );\n\t}\n\tif ( !isNonNegativeInteger( nargs ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a nonnegative integer. Value: `%s`.', nargs ) );\n\t}\n\tif ( !isFunction( ctor ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a constructor function. Value: `%s`.', ctor ) );\n\t}\n\tfcns = [ fcn0, fcn1, fcn2, fcn3, fcn4, fcn5 ];\n\treturn ( nargs <= 5 ) ? fcns[ nargs ] : fcnN;\n\n\t/**\n\t* Invokes a nullary function.\n\t*\n\t* @private\n\t* @returns {*} result\n\t*/\n\tfunction fcn0() {\n\t\treturn fcn();\n\t}\n\n\t/**\n\t* Invokes a unary function accepting complex numbers.\n\t*\n\t* @private\n\t* @param {(number|Complex)} x - input value\n\t* @returns {*} result\n\t*/\n\tfunction fcn1( x ) {\n\t\tif ( typeof x === T ) {\n\t\t\tx = new ctor( x, 0.0 );\n\t\t}\n\t\treturn fcn( x );\n\t}\n\n\t/**\n\t* Invokes a binary function accepting complex numbers.\n\t*\n\t* @private\n\t* @param {(number|Complex)} x - input value\n\t* @param {(number|Complex)} y - input value\n\t* @returns {*} result\n\t*/\n\tfunction fcn2( x, y ) {\n\t\tif ( typeof x === T ) {\n\t\t\tx = new ctor( x, 0.0 );\n\t\t}\n\t\tif ( typeof y === T ) {\n\t\t\ty = new ctor( y, 0.0 );\n\t\t}\n\t\treturn fcn( x, y );\n\t}\n\n\t/**\n\t* Invokes a ternary function accepting complex numbers.\n\t*\n\t* @private\n\t* @param {(number|Complex)} x - input value\n\t* @param {(number|Complex)} y - input value\n\t* @param {(number|Complex)} z - input value\n\t* @returns {*} result\n\t*/\n\tfunction fcn3( x, y, z ) {\n\t\tif ( typeof x === T ) {\n\t\t\tx = new ctor( x, 0.0 );\n\t\t}\n\t\tif ( typeof y === T ) {\n\t\t\ty = new ctor( y, 0.0 );\n\t\t}\n\t\tif ( typeof z === T ) {\n\t\t\tz = new ctor( z, 0.0 );\n\t\t}\n\t\treturn fcn( x, y, z );\n\t}\n\n\t/**\n\t* Invokes a quaternary function accepting complex numbers.\n\t*\n\t* @private\n\t* @param {(number|Complex)} x - input value\n\t* @param {(number|Complex)} y - input value\n\t* @param {(number|Complex)} z - input value\n\t* @param {(number|Complex)} w - input value\n\t* @returns {*} result\n\t*/\n\tfunction fcn4( x, y, z, w ) {\n\t\tif ( typeof x === T ) {\n\t\t\tx = new ctor( x, 0.0 );\n\t\t}\n\t\tif ( typeof y === T ) {\n\t\t\ty = new ctor( y, 0.0 );\n\t\t}\n\t\tif ( typeof z === T ) {\n\t\t\tz = new ctor( z, 0.0 );\n\t\t}\n\t\tif ( typeof w === T ) {\n\t\t\tw = new ctor( w, 0.0 );\n\t\t}\n\t\treturn fcn( x, y, z, w );\n\t}\n\n\t/**\n\t* Invokes a quinary function accepting complex numbers.\n\t*\n\t* @private\n\t* @param {(number|Complex)} x - input value\n\t* @param {(number|Complex)} y - input value\n\t* @param {(number|Complex)} z - input value\n\t* @param {(number|Complex)} w - input value\n\t* @param {(number|Complex)} v - input value\n\t* @returns {*} result\n\t*/\n\tfunction fcn5( x, y, z, w, v ) {\n\t\tif ( typeof x === T ) {\n\t\t\tx = new ctor( x, 0.0 );\n\t\t}\n\t\tif ( typeof y === T ) {\n\t\t\ty = new ctor( y, 0.0 );\n\t\t}\n\t\tif ( typeof z === T ) {\n\t\t\tz = new ctor( z, 0.0 );\n\t\t}\n\t\tif ( typeof w === T ) {\n\t\t\tw = new ctor( w, 0.0 );\n\t\t}\n\t\tif ( typeof v === T ) {\n\t\t\tv = new ctor( v, 0.0 );\n\t\t}\n\t\treturn fcn( x, y, z, w, v );\n\t}\n\n\t/**\n\t* Invokes a function accepting an arbitrary number of complex number input arguments.\n\t*\n\t* @private\n\t* @param {...(number|Complex)} args - input values\n\t* @returns {*} result\n\t*/\n\tfunction fcnN() {\n\t\tvar args;\n\t\tvar v;\n\t\tvar i;\n\n\t\targs = [];\n\t\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\t\tv = arguments[ i ];\n\t\t\tif ( typeof v === T ) {\n\t\t\t\tv = new ctor( v, 0.0 );\n\t\t\t}\n\t\t\targs.push( v );\n\t\t}\n\t\treturn fcn.apply( null, args );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default wrap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name cast\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/base/cast-return}\n*/\nimport cast from './../../base/cast-return';\nsetReadOnly( ns, 'cast', cast );\n\n/**\n* @name wrap\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/base/wrap-function}\n*/\nimport wrap from './../../base/wrap-function';\nsetReadOnly( ns, 'wrap', wrap );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNumber } from '@stdlib/assert/is-number';\nimport defineProperty from '@stdlib/utils/define-property';\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\nimport format from '@stdlib/string/format';\nimport toStr from './tostring.js';\nimport toJSON from './tojson.js';\n\n\n// MAIN //\n\n/**\n* 64-bit complex number constructor.\n*\n* @constructor\n* @param {number} real - real component\n* @param {number} imag - imaginary component\n* @throws {TypeError} must invoke using the `new` keyword\n* @throws {TypeError} real component must be a number\n* @throws {TypeError} imaginary component must be a number\n* @returns {Complex64} 64-bit complex number\n*\n* @example\n* var z = new Complex64( 5.0, 3.0 );\n* // returns <Complex64>\n*/\nfunction Complex64( real, imag ) {\n\tif ( !( this instanceof Complex64 ) ) {\n\t\tthrow new TypeError( 'invalid invocation. Constructor must be called with the `new` keyword.' );\n\t}\n\tif ( !isNumber( real ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Real component must be a number. Value: `%s`.', real ) );\n\t}\n\tif ( !isNumber( imag ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Imaginary component must be a number. Value: `%s`.', imag ) );\n\t}\n\tdefineProperty( this, 're', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'writable': false,\n\t\t'value': float64ToFloat32( real )\n\t});\n\tdefineProperty( this, 'im', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'writable': false,\n\t\t'value': float64ToFloat32( imag )\n\t});\n\treturn this;\n}\n\n/**\n* Size (in bytes) of each component.\n*\n* @name BYTES_PER_ELEMENT\n* @memberof Complex64\n* @type {integer}\n* @returns {integer} size of each component\n*\n* @example\n* var nbytes = Complex64.BYTES_PER_ELEMENT;\n* // returns 4\n*/\nsetReadOnly( Complex64, 'BYTES_PER_ELEMENT', 4 );\n\n/**\n* Size (in bytes) of each component.\n*\n* @name BYTES_PER_ELEMENT\n* @memberof Complex64.prototype\n* @type {integer}\n* @returns {integer} size of each component\n*\n* @example\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var nbytes = z.BYTES_PER_ELEMENT;\n* // returns 4\n*/\nsetReadOnly( Complex64.prototype, 'BYTES_PER_ELEMENT', 4 );\n\n/**\n* Length (in bytes) of a complex number.\n*\n* @name byteLength\n* @memberof Complex64.prototype\n* @type {integer}\n* @returns {integer} byte length\n*\n* @example\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var nbytes = z.byteLength;\n* // returns 8\n*/\nsetReadOnly( Complex64.prototype, 'byteLength', 8 );\n\n/**\n* Serializes a complex number as a string.\n*\n* @name toString\n* @memberof Complex64.prototype\n* @type {Function}\n* @returns {string} serialized complex number\n*\n* @example\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var str = z.toString();\n* // returns '5 + 3i'\n*/\nsetReadOnly( Complex64.prototype, 'toString', toStr );\n\n/**\n* Serializes a complex number as a JSON object.\n*\n* ## Notes\n*\n* -   `JSON.stringify()` implicitly calls this method when stringifying a `Complex64` instance.\n*\n* @name toJSON\n* @memberof Complex64.prototype\n* @type {Function}\n* @returns {Object} serialized complex number\n*\n* @example\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var obj = z.toJSON();\n* // returns { 'type': 'Complex64', 're': 5.0, 'im': 3.0 }\n*/\nsetReadOnly( Complex64.prototype, 'toJSON', toJSON );\n\n\n// EXPORTS //\n\nexport default Complex64;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNumber } from '@stdlib/assert/is-number';\nimport defineProperty from '@stdlib/utils/define-property';\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport format from '@stdlib/string/format';\nimport toStr from './tostring.js';\nimport toJSON from './tojson.js';\n\n\n// MAIN //\n\n/**\n* 128-bit complex number constructor.\n*\n* @constructor\n* @param {number} real - real component\n* @param {number} imag - imaginary component\n* @throws {TypeError} must invoke using the `new` keyword\n* @throws {TypeError} real component must be a number\n* @throws {TypeError} imaginary component must be a number\n* @returns {Complex128} 128-bit complex number\n*\n* @example\n* var z = new Complex128( 5.0, 3.0 );\n* // returns <Complex128>\n*/\nfunction Complex128( real, imag ) {\n\tif ( !( this instanceof Complex128 ) ) {\n\t\tthrow new TypeError( 'invalid invocation. Constructor must be called with the `new` keyword.' );\n\t}\n\tif ( !isNumber( real ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Real component must be a number. Value: `%s`.', real ) );\n\t}\n\tif ( !isNumber( imag ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Imaginary component must be a number. Value: `%s`.', imag ) );\n\t}\n\tdefineProperty( this, 're', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'writable': false,\n\t\t'value': real\n\t});\n\tdefineProperty( this, 'im', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'writable': false,\n\t\t'value': imag\n\t});\n\treturn this;\n}\n\n/**\n* Size (in bytes) of each component.\n*\n* @name BYTES_PER_ELEMENT\n* @memberof Complex128\n* @type {integer}\n* @returns {integer} size of each component\n*\n* @example\n* var nbytes = Complex128.BYTES_PER_ELEMENT;\n* // returns 8\n*/\nsetReadOnly( Complex128, 'BYTES_PER_ELEMENT', 8 );\n\n/**\n* Size (in bytes) of each component.\n*\n* @name BYTES_PER_ELEMENT\n* @memberof Complex128.prototype\n* @type {integer}\n* @returns {integer} size of each component\n*\n* @example\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var nbytes = z.BYTES_PER_ELEMENT;\n* // returns 8\n*/\nsetReadOnly( Complex128.prototype, 'BYTES_PER_ELEMENT', 8 );\n\n/**\n* Length (in bytes) of a complex number.\n*\n* @name byteLength\n* @memberof Complex128.prototype\n* @type {integer}\n* @returns {integer} byte length\n*\n* @example\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var nbytes = z.byteLength;\n* // returns 16\n*/\nsetReadOnly( Complex128.prototype, 'byteLength', 16 );\n\n/**\n* Serializes a complex number as a string.\n*\n* @name toString\n* @memberof Complex128.prototype\n* @type {Function}\n* @returns {string} serialized complex number\n*\n* @example\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var str = z.toString();\n* // returns '5 + 3i'\n*/\nsetReadOnly( Complex128.prototype, 'toString', toStr );\n\n/**\n* Serializes a complex number as a JSON object.\n*\n* ## Notes\n*\n* -   `JSON.stringify()` implicitly calls this method when stringifying a `Complex128` instance.\n*\n* @name toJSON\n* @memberof Complex128.prototype\n* @type {Function}\n* @returns {Object} serialized complex number\n*\n* @example\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var obj = z.toJSON();\n* // returns { 'type': 'Complex128', 're': 5.0, 'im': 3.0 }\n*/\nsetReadOnly( Complex128.prototype, 'toJSON', toJSON );\n\n\n// EXPORTS //\n\nexport default Complex128;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Serializes a complex number as a string.\n*\n* @private\n* @returns {string} serialized complex number\n*/\nfunction toString() { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar str = '' + this.re;\n\tif ( this.im < 0 ) {\n\t\tstr += ' - ' + (-this.im);\n\t} else {\n\t\tstr += ' + ' + this.im;\n\t}\n\tstr += 'i';\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default toString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Serializes a complex number as a JSON object.\n*\n* @private\n* @returns {Object} JSON representation\n*/\nfunction toJSON() {\n\t/* eslint-disable no-invalid-this */\n\tvar out = {};\n\tout.type = 'Complex64';\n\tout.re = this.re;\n\tout.im = this.im;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default toJSON;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Serializes a complex number as a string.\n*\n* @private\n* @returns {string} serialized complex number\n*/\nfunction toString() { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar str = '' + this.re;\n\tif ( this.im < 0 ) {\n\t\tstr += ' - ' + (-this.im);\n\t} else {\n\t\tstr += ' + ' + this.im;\n\t}\n\tstr += 'i';\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default toString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Serializes a complex number as a JSON object.\n*\n* @private\n* @returns {Object} JSON representation\n*/\nfunction toJSON() {\n\t/* eslint-disable no-invalid-this */\n\tvar out = {};\n\tout.type = 'Complex128';\n\tout.re = this.re;\n\tout.im = this.im;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default toJSON;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Complex64 from './../../float32/ctor';\nimport Complex128 from './../../float64/ctor';\n\n\n// MAIN //\n\n// Mapping from data types to constructors...\nvar ctors = {\n\t'complex64': Complex64,\n\t'complex128': Complex128\n};\n\n\n// EXPORTS //\n\nexport default ctors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport table from './ctors.js';\n\n\n// MAIN //\n\n/**\n* Returns a complex number constructor.\n*\n* @param {string} dtype - data type\n* @returns {(Function|null)} constructor or null\n*\n* @example\n* var ctor = ctors( 'complex128' );\n* // returns <Function>\n*\n* @example\n* var ctor = ctors( 'complex' );\n* // returns null\n*/\nfunction ctors( dtype ) {\n\treturn table[ dtype ] || null;\n}\n\n\n// EXPORTS //\n\nexport default ctors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ctors from './../../ctors';\nimport format from '@stdlib/string/format';\n\n\n// VARIABLES //\n\nvar TABLE = {\n\t'float64': 'complex128',\n\t'float32': 'complex64'\n};\nvar DEFAULT_CTOR = ctors( TABLE[ 'float64' ] );\n\n\n// MAIN //\n\n/**\n* Creates a complex number.\n*\n* @param {number} real - real component\n* @param {number} imag - imaginary component\n* @param {string} [dtype=\"float64\"] - data type\n* @throws {TypeError} must provide a recognized data type\n* @returns {Complex} complex number\n*\n* @example\n* var z = complex( 5.0, 3.0, 'float64' );\n* // returns <Complex128>\n*/\nfunction complex( real, imag, dtype ) {\n\tvar ctor;\n\tif ( arguments.length > 2 ) {\n\t\tctor = ctors( TABLE[ dtype ] );\n\t\tif ( ctor ) {\n\t\t\treturn new ctor( real, imag );\n\t\t}\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a recognized data type. Value: `%s`.', dtype ) );\n\t}\n\treturn new DEFAULT_CTOR( real, imag );\n}\n\n\n// EXPORTS //\n\nexport default complex;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n// Mapping from complex number constructors to data types...\nvar ctor2dtypes = {\n\t'Complex64': 'complex64',\n\t'Complex128': 'complex128'\n};\n\n\n// EXPORTS //\n\nexport default ctor2dtypes;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport DTYPES from './dtypes.json';\n\n\n// MAIN //\n\n/**\n* Returns a list of complex number data types.\n*\n* @returns {StringArray} list of complex number data types\n*\n* @example\n* var list = dtypes();\n* // e.g., returns [ 'complex64', 'complex128' ]\n*/\nfunction dtypes() {\n\treturn DTYPES.slice();\n}\n\n\n// EXPORTS //\n\nexport default dtypes;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport dtypes from './../../dtypes';\n\n\n// MAIN //\n\nvar DTYPES = dtypes();\n\n\n// EXPORTS //\n\nexport default DTYPES;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ctors from './../../ctors';\nimport DTYPES from './dtypes.js';\n\n\n// MAIN //\n\nvar CTORS = [];\nvar i;\nfor ( i = 0; i < DTYPES.length; i++ ) {\n\tCTORS.push( ctors( DTYPES[ i ] ) );\n}\n\n\n// EXPORTS //\n\nexport default CTORS;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constructorName from '@stdlib/utils/constructor-name';\nimport ctor2dtype from './ctor2dtype.js';\nimport CTORS from './ctors.js';\nimport DTYPES from './dtypes.js';\n\n\n// VARIABLES //\n\nvar NTYPES = DTYPES.length;\n\n\n// MAIN //\n\n/**\n* Returns the data type of a complex number.\n*\n* @param {*} value - input value\n* @returns {(string|null)} data type\n*\n* @example\n* import Complex128 from '@stdlib/complex/float64/ctor';\n*\n* var dt = dtype( new Complex128( 1.0, 2.0 ) );\n* // returns 'complex128'\n*\n* var dt = dtype( 'beep' );\n* // returns null\n*/\nfunction dtype( value ) {\n\tvar i;\n\tfor ( i = 0; i < NTYPES; i++ ) {\n\t\tif ( value instanceof CTORS[ i ] ) {\n\t\t\treturn DTYPES[ i ];\n\t\t}\n\t}\n\t// If the above failed, fall back to a more robust (and significantly slower) means for resolving underlying data types:\n\treturn ctor2dtype[ constructorName( value ) ] || null;\n}\n\n\n// EXPORTS //\n\nexport default dtype;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns the real component of a single-precision complex floating-point number.\n*\n* @param {Complex} z - complex number\n* @returns {number} real component\n*\n* @example\n* import Complex64 from '@stdlib/complex/float32/ctor';\n*\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var re = real( z );\n* // returns 5.0\n*/\nfunction real( z ) {\n\treturn z.re;\n}\n\n\n// EXPORTS //\n\nexport default real;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns the imaginary component of a single-precision complex floating-point number.\n*\n* @param {Complex} z - complex number\n* @returns {number} imaginary component\n*\n* @example\n* import Complex64 from '@stdlib/complex/float32/ctor';\n*\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var im = imag( z );\n* // returns 3.0\n*/\nfunction imag( z ) {\n\treturn z.im;\n}\n\n\n// EXPORTS //\n\nexport default imag;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Float32Array from '@stdlib/array/float32';\n\n\n// MAIN //\n\n/**\n* Returns the real and imaginary components of a single-precision complex floating-point number.\n*\n* @param {Complex64} z - complex number\n* @returns {Float32Array} real and imaginary components\n*\n* @example\n* import Complex64 from '@stdlib/complex/float32/ctor';\n*\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var out = reim( z );\n* // returns <Float32Array>[ 5.0, 3.0 ]\n*/\nfunction reim( z ) {\n\tvar out = new Float32Array( 2 );\n\tout[ 0 ] = z.re;\n\tout[ 1 ] = z.im;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default reim;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name isEqual\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/float32/base/assert/is-equal}\n*/\nimport isEqual from './../../../../float32/base/assert/is-equal';\nsetReadOnly( ns, 'isEqual', isEqual );\n\n/**\n* @name isNotEqual\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/float32/base/assert/is-not-equal}\n*/\nimport isNotEqual from './../../../../float32/base/assert/is-not-equal';\nsetReadOnly( ns, 'isNotEqual', isNotEqual );\n\n/**\n* @name isSameValue\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/float32/base/assert/is-same-value}\n*/\nimport isSameValue from './../../../../float32/base/assert/is-same-value';\nsetReadOnly( ns, 'isSameValue', isSameValue );\n\n/**\n* @name isSameValueZero\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/float32/base/assert/is-same-value-zero}\n*/\nimport isSameValueZero from './../../../../float32/base/assert/is-same-value-zero';\nsetReadOnly( ns, 'isSameValueZero', isSameValueZero );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport f32 from '@stdlib/number/float64/base/to-float32';\nimport Complex64 from './../../../../float32/ctor';\nimport realf from './../../../../float32/real';\nimport imagf from './../../../../float32/imag';\n\n\n// MAIN //\n\n/**\n* Multiplies two single-precision complex floating-point numbers.\n*\n* @param {Complex64} z1 - complex number\n* @param {Complex64} z2 - complex number\n* @returns {Complex64} result\n*\n* @example\n* import Complex64 from '@stdlib/complex/float32/ctor';\n*\n* var z1 = new Complex64( 5.0, 3.0 );\n* var z2 = new Complex64( -2.0, 1.0 );\n*\n* var out = mul( z1, z2 );\n* // returns <Complex64>[ -13.0, -1.0 ]\n*/\nfunction mul( z1, z2 ) {\n\tvar re1 = realf( z1 );\n\tvar re2 = realf( z2 );\n\tvar im1 = imagf( z1 );\n\tvar im2 = imagf( z2 );\n\tvar re = f32(re1*re2) - f32(im1*im2);\n\tvar im = f32(re1*im2) + f32(im1*re2);\n\treturn new Complex64( f32( re ), f32( im ) );\n}\n\n\n// EXPORTS //\n\nexport default mul;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport f32 from '@stdlib/number/float64/base/to-float32';\nimport Complex64 from './../../../../float32/ctor';\nimport realf from './../../../../float32/real';\nimport imagf from './../../../../float32/imag';\n\n\n// MAIN //\n\n/**\n* Scales a single-precision complex floating-point number by a real-valued single-precision floating-point scalar constant.\n*\n* @param {number} alpha - scalar constant\n* @param {Complex64} z - complex number\n* @returns {Complex64} result\n*\n* @example\n* import Complex64 from '@stdlib/complex/float32/ctor';\n*\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var out = scale( 5.0, z );\n* // returns <Complex64>[ 25.0, 15.0 ]\n*/\nfunction scale( alpha, z ) {\n\treturn new Complex64( f32( realf(z)*alpha ), f32( imagf(z)*alpha ) );\n}\n\n\n// EXPORTS //\n\nexport default scale;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport reimf from './../../../../../float32/reim';\n\n\n// MAIN //\n\n/**\n* Tests whether two single-precision complex floating-point numbers are equal.\n*\n* @param {Complex64} z1 - first complex number\n* @param {Complex64} z2 - second complex number\n* @returns {boolean} result\n*\n* @example\n* import Complex64 from '@stdlib/complex/float32/ctor';\n*\n* var z1 = new Complex64( 5.0, 3.0 );\n* var z2 = new Complex64( 5.0, 3.0 );\n*\n* var v = isEqualf( z1, z2 );\n* // returns true\n*/\nfunction isEqualf( z1, z2 ) {\n\tvar parts1 = reimf( z1 );\n\tvar parts2 = reimf( z2 );\n\treturn (\n\t\tparts1[ 0 ] === parts2[ 0 ] &&\n\t\tparts1[ 1 ] === parts2[ 1 ]\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isEqualf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport reimf from './../../../../../float32/reim';\n\n\n// MAIN //\n\n/**\n* Tests whether two single-precision complex floating-point numbers are not equal.\n*\n* @param {Complex64} z1 - first complex number\n* @param {Complex64} z2 - second complex number\n* @returns {boolean} result\n*\n* @example\n* import Complex64 from '@stdlib/complex/float32/ctor';\n*\n* var z1 = new Complex64( 5.0, 3.0 );\n* var z2 = new Complex64( 5.0, -3.0 );\n*\n* var v = isNotEqualf( z1, z2 );\n* // returns true\n*/\nfunction isNotEqualf( z1, z2 ) {\n\tvar parts1 = reimf( z1 );\n\tvar parts2 = reimf( z2 );\n\treturn (\n\t\tparts1[ 0 ] !== parts2[ 0 ] ||\n\t\tparts1[ 1 ] !== parts2[ 1 ]\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isNotEqualf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isSame from '@stdlib/number/float32/base/assert/is-same-value';\nimport reimf from './../../../../../float32/reim';\n\n\n// MAIN //\n\n/**\n* Tests whether two single-precision complex floating-point numbers are the same value.\n*\n* ## Notes\n*\n* -   The function implements the [SameValue Algorithm][ecma-262-same-value-algorithm], as specified in ECMAScript 5.\n* -   In contrast to the strict equality operator `===`, `-0` and `+0` are distinguishable and `NaNs` are the same.\n*\n* [ecma-262-same-value-algorithm]: http://ecma-international.org/ecma-262/5.1/#sec-9.12\n*\n* @param {Complex64} z1 - first complex number\n* @param {Complex64} z2 - second complex number\n* @returns {boolean} result\n*\n* @example\n* import Complex64 from '@stdlib/complex/float32/ctor';\n*\n* var z1 = new Complex64( 5.0, 3.0 );\n* var z2 = new Complex64( 5.0, 3.0 );\n*\n* var v = isSameValuef( z1, z2 );\n* // returns true\n*/\nfunction isSameValuef( z1, z2 ) {\n\tvar parts1 = reimf( z1 );\n\tvar parts2 = reimf( z2 );\n\treturn (\n\t\tisSame( parts1[ 0 ], parts2[ 0 ] ) &&\n\t\tisSame( parts1[ 1 ], parts2[ 1 ] )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isSameValuef;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isSame from '@stdlib/number/float32/base/assert/is-same-value-zero';\nimport reimf from './../../../../../float32/reim';\n\n\n// MAIN //\n\n/**\n* Tests whether two single-precision complex floating-point numbers are the same value.\n*\n* ## Notes\n*\n* -   The function implements the SameValueZero Algorithm used by `TypedArray` and `ArrayBuffer` constructors, `Map` and `Set` operations, `String.prototype.includes`, and `Array.prototype.includes` since ES2016.\n* -   In contrast to the strict equality operator `===`, `NaNs` are considered the same value.\n*\n* @param {Complex64} z1 - first complex number\n* @param {Complex64} z2 - second complex number\n* @returns {boolean} result\n*\n* @example\n* import Complex64 from '@stdlib/complex/float32/ctor';\n*\n* var z1 = new Complex64( 5.0, 3.0 );\n* var z2 = new Complex64( 5.0, 3.0 );\n*\n* var v = isSameValueZerof( z1, z2 );\n* // returns true\n*/\nfunction isSameValueZerof( z1, z2 ) {\n\tvar parts1 = reimf( z1 );\n\tvar parts2 = reimf( z2 );\n\treturn (\n\t\tisSame( parts1[ 0 ], parts2[ 0 ] ) &&\n\t\tisSame( parts1[ 1 ], parts2[ 1 ] )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isSameValueZerof;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Multiply two single-precision complex floating-point numbers.\n*\n* @module @stdlib/complex/float32/base/mul\n*\n* @example\n* import Complex64 from '@stdlib/complex/float32/ctor';\n* import mul from '@stdlib/complex/float32/base/mul';\n*\n* var z1 = new Complex64( 5.0, 3.0 );\n* var z2 = new Complex64( -2.0, 1.0 );\n*\n* var out = mul( z1, z2 );\n* // returns <Complex64>[ -13.0, -1.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\nimport strided from './strided.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\nsetReadOnly( main, 'strided', strided );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"assign\": \"main.assign\", \"strided\": \"main.strided\" }\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport f32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Multiplies two single-precision complex floating-point numbers and assigns results to a provided output array.\n*\n* @param {number} re1 - real component of the first complex number\n* @param {number} im1 - imaginary component of the first complex number\n* @param {number} re2 - real component of the second complex number\n* @param {number} im2 - imaginary component of the second complex number\n* @param {Collection} out - output array\n* @param {integer} strideOut - stride length\n* @param {NonNegativeInteger} offsetOut - starting index\n* @returns {Collection} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var out = assign( 5.0, 3.0, -2.0, 1.0, new Float32Array( 2 ), 1, 0 );\n* // returns <Float32Array>[ -13.0, -1.0 ]\n*/\nfunction assign( re1, im1, re2, im2, out, strideOut, offsetOut ) {\n\tout[ offsetOut ] = f32(re1*re2) - f32(im1*im2);\n\tout[ offsetOut+strideOut ] = f32(re1*im2) + f32(im1*re2);\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default assign;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport f32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Multiplies two single-precision complex floating-point numbers stored in real-valued strided array views and assigns results to a provided strided output array.\n*\n* @param {Float32Array} z1 - first complex number view\n* @param {integer} strideZ1 - stride length for `z1`\n* @param {NonNegativeInteger} offsetZ1 - starting index for `z1`\n* @param {Float32Array} z2 - second complex number view\n* @param {integer} strideZ2 - stride length for `z2`\n* @param {NonNegativeInteger} offsetZ2 - starting index for `z2`\n* @param {Collection} out - output array\n* @param {integer} strideOut - stride length for `out`\n* @param {NonNegativeInteger} offsetOut - starting index for `out`\n* @returns {Collection} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var z1 = new Float32Array( [ 5.0, 3.0 ] );\n* var z2 = new Float32Array( [ -2.0, 1.0 ] );\n*\n* var out = strided( z1, 1, 0, z2, 1, 0, new Float32Array( 2 ), 1, 0 );\n* // returns <Float32Array>[ -13.0, -1.0 ]\n*/\nfunction strided( z1, strideZ1, offsetZ1, z2, strideZ2, offsetZ2, out, strideOut, offsetOut ) { // eslint-disable-line max-len\n\tvar re1 = z1[ offsetZ1 ];\n\tvar im1 = z1[ offsetZ1+strideZ1 ];\n\tvar re2 = z2[ offsetZ2 ];\n\tvar im2 = z2[ offsetZ2+strideZ2 ];\n\tout[ offsetOut ] = f32(re1*re2) - f32(im1*im2);\n\tout[ offsetOut+strideOut ] = f32(re1*im2) + f32(im1*re2);\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default strided;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Scale a single-precision complex floating-point number by a real-valued single-precision floating-point scalar constant.\n*\n* @module @stdlib/complex/float32/base/scale\n*\n* @example\n* import Complex64 from '@stdlib/complex/float32/ctor';\n* import scale from '@stdlib/complex/float32/base/scale';\n*\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var out = scale( scalar, z );\n* // returns <Complex64>[ 25.0, 15.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\nimport strided from './strided.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\nsetReadOnly( main, 'strided', strided );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"assign\": \"main.assign\", \"strided\": \"main.strided\" }\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport f32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Scales a single-precision complex floating-point number by a real-valued single-precision floating-point scalar constant and assigns results to a provided output array.\n*\n* @param {number} alpha - scalar constant\n* @param {number} re - real component of the complex number\n* @param {number} im - imaginary component of the complex number\n* @param {Collection} out - output array\n* @param {integer} strideOut - stride length\n* @param {NonNegativeInteger} offsetOut - starting index\n* @returns {Collection} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var out = assign( 5.0, 5.0, 3.0, new Float32Array( 2 ), 1, 0 );\n* // returns <Float32Array>[ 25.0, 15.0 ]\n*/\nfunction assign( alpha, re, im, out, strideOut, offsetOut ) {\n\tout[ offsetOut ] = f32( re * alpha );\n\tout[ offsetOut+strideOut ] = f32( im * alpha );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default assign;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport f32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Scales a single-precision complex floating-point number stored in a real-valued strided array view by a real-valued single-precision floating-point scalar constant and assigns results to a provided strided output array.\n*\n* @param {number} alpha - scalar constant\n* @param {Float32Array} z - complex number view\n* @param {integer} strideZ - stride length for `z`\n* @param {NonNegativeInteger} offsetZ - starting index for `z`\n* @param {Collection} out - output array\n* @param {integer} strideOut - stride length for `out`\n* @param {NonNegativeInteger} offsetOut - starting index for `out`\n* @returns {Collection} output array\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var z = new Float32Array( [ 5.0, 3.0 ] );\n*\n* var out = strided( 5.0, z, 1, 0, new Float32Array( 2 ), 1, 0 );\n* // returns <Float32Array>[ 25.0, 15.0 ]\n*/\nfunction strided( alpha, z, strideZ, offsetZ, out, strideOut, offsetOut ) {\n\tout[ offsetOut ] = f32( alpha * z[ offsetZ ] );\n\tout[ offsetOut+strideOut ] = f32( alpha * z[ offsetZ+strideZ ] );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default strided;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name add\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/float32/base/add}\n*/\nimport add from './../../../float32/base/add';\nsetReadOnly( ns, 'add', add );\n\n/**\n* @name assert\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/complex/float32/base/assert}\n*/\nimport assert from './../../../float32/base/assert';\nsetReadOnly( ns, 'assert', assert );\n\n/**\n* @name identity\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/float32/base/identity}\n*/\nimport identity from './../../../float32/base/identity';\nsetReadOnly( ns, 'identity', identity );\n\n/**\n* @name mul\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/float32/base/mul}\n*/\nimport mul from './../../../float32/base/mul';\nsetReadOnly( ns, 'mul', mul );\n\n/**\n* @name neg\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/float32/base/neg}\n*/\nimport neg from './../../../float32/base/neg';\nsetReadOnly( ns, 'neg', neg );\n\n/**\n* @name scale\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/float32/base/scale}\n*/\nimport scale from './../../../float32/base/scale';\nsetReadOnly( ns, 'scale', scale );\n\n/**\n* @name sub\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/float32/base/sub}\n*/\nimport sub from './../../../float32/base/sub';\nsetReadOnly( ns, 'sub', sub );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport f32 from '@stdlib/number/float64/base/to-float32';\nimport Complex64 from './../../../../float32/ctor';\nimport realf from './../../../../float32/real';\nimport imagf from './../../../../float32/imag';\n\n\n// MAIN //\n\n/**\n* Adds two single-precision complex floating-point numbers.\n*\n* @param {Complex64} z1 - complex number\n* @param {Complex64} z2 - complex number\n* @returns {Complex64} result\n*\n* @example\n* import Complex64 from '@stdlib/complex/float32/ctor';\n*\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var out = add( z, z );\n* // returns <Complex64>[ 10.0, 6.0 ]\n*/\nfunction add( z1, z2 ) {\n\tvar re = f32( realf( z1 ) + realf( z2 ) );\n\tvar im = f32( imagf( z1 ) + imagf( z2 ) );\n\treturn new Complex64( re, im );\n}\n\n\n// EXPORTS //\n\nexport default add;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates the identity function for a single-precision complex floating-point number.\n*\n* @param {Complex64} z - input value\n* @returns {Complex64} input value\n*\n* @example\n* import Complex64 from '@stdlib/complex/float32/ctor';\n*\n* var v = cidentityf( new Complex64( -1.0, 2.0 ) );\n* // returns <Complex64>[ -1.0, 2.0 ]\n*/\nfunction cidentityf( z ) {\n\treturn z;\n}\n\n\n// EXPORTS //\n\nexport default cidentityf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport realf from './../../../../float32/real';\nimport imagf from './../../../../float32/imag';\nimport Complex64 from './../../../../float32/ctor';\n\n\n// MAIN //\n\n/**\n* Negates a single-precision complex floating-point number.\n*\n* @param {Complex64} z - complex number\n* @returns {Complex64} result\n*\n* @example\n* import Complex64 from '@stdlib/complex/float32/ctor';\n*\n* var z = new Complex64( -4.2, 5.5 );\n*\n* var out = cnegf( z );\n* // returns <Complex64>[ ~4.2, -5.5 ]\n*\n* @example\n* import Complex64 from '@stdlib/complex/float32/ctor';\n*\n* var z = new Complex64( 0.0, 0.0 );\n*\n* var out = cnegf( z );\n* // returns <Complex64>[ -0.0, -0.0 ]\n*\n* @example\n* import Complex64 from '@stdlib/complex/float32/ctor';\n*\n* var z = new Complex64( NaN, NaN );\n*\n* var out = cnegf( z );\n* // returns <Complex64>[ NaN, NaN ]\n*/\nfunction cnegf( z ) {\n\treturn new Complex64( -realf( z ), -imagf( z ) );\n}\n\n\n// EXPORTS //\n\nexport default cnegf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport f32 from '@stdlib/number/float64/base/to-float32';\nimport Complex64 from './../../../../float32/ctor';\nimport realf from './../../../../float32/real';\nimport imagf from './../../../../float32/imag';\n\n\n// MAIN //\n\n/**\n* Subtracts two single-precision complex floating-point numbers.\n*\n* @param {Complex64} z1 - complex number\n* @param {Complex64} z2 - complex number\n* @returns {Complex64} result\n*\n* @example\n* import Complex64 from '@stdlib/complex/float32/ctor';\n*\n* var z1 = new Complex64( 5.0, 3.0 );\n* var z2 = new Complex64( -2.0, 1.0 );\n*\n* var out = csubf( z1, z2 );\n* // returns <Complex64>[ 7.0, 2.0 ]\n*/\nfunction csubf( z1, z2 ) {\n\tvar re = f32( realf( z1 ) - realf( z2 ) );\n\tvar im = f32( imagf( z1 ) - imagf( z2 ) );\n\treturn new Complex64( re, im );\n}\n\n\n// EXPORTS //\n\nexport default csubf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name base\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/complex/float32/base}\n*/\nimport base from './../../float32/base';\nsetReadOnly( ns, 'base', base );\n\n/**\n* @name conj\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/float32/conj}\n*/\nimport conj from './../../float32/conj';\nsetReadOnly( ns, 'conj', conj );\n\n/**\n* @name Complex64\n* @memberof ns\n* @readonly\n* @constructor\n* @see {@link module:@stdlib/complex/float32/ctor}\n*/\nimport Complex64 from './../../float32/ctor';\nsetReadOnly( ns, 'Complex64', Complex64 );\n\n/**\n* @name imag\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/float32/imag}\n*/\nimport imag from './../../float32/imag';\nsetReadOnly( ns, 'imag', imag );\n\n/**\n* @name parseComplex64\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/float32/parse}\n*/\nimport parseComplex64 from './../../float32/parse';\nsetReadOnly( ns, 'parseComplex64', parseComplex64 );\n\n/**\n* @name real\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/float32/real}\n*/\nimport real from './../../float32/real';\nsetReadOnly( ns, 'real', real );\n\n/**\n* @name reim\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/float32/reim}\n*/\nimport reim from './../../float32/reim';\nsetReadOnly( ns, 'reim', reim );\n\n/**\n* @name reviveComplex64\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/float32/reviver}\n*/\nimport reviveComplex64 from './../../float32/reviver';\nsetReadOnly( ns, 'reviveComplex64', reviveComplex64 );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns the real component of a double-precision complex floating-point number.\n*\n* @param {Complex} z - complex number\n* @returns {number} real component\n*\n* @example\n* import Complex128 from '@stdlib/complex/float64/ctor';\n*\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var re = real( z );\n* // returns 5.0\n*/\nfunction real( z ) {\n\treturn z.re;\n}\n\n\n// EXPORTS //\n\nexport default real;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns the imaginary component of a double-precision complex floating-point number.\n*\n* @param {Complex} z - complex number\n* @returns {number} imaginary component\n*\n* @example\n* import Complex128 from '@stdlib/complex/float64/ctor';\n*\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var im = imag( z );\n* // returns 3.0\n*/\nfunction imag( z ) {\n\treturn z.im;\n}\n\n\n// EXPORTS //\n\nexport default imag;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Complex128 from './../../../../float64/ctor';\nimport real from './../../../../float64/real';\nimport imag from './../../../../float64/imag';\n\n\n// MAIN //\n\n/**\n* Adds two double-precision complex floating-point numbers.\n*\n* @param {Complex128} z1 - complex number\n* @param {Complex128} z2 - complex number\n* @returns {Complex128} result\n*\n* @example\n* import Complex128 from '@stdlib/complex/float64/ctor';\n*\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var out = cadd( z, z );\n* // returns <Complex128>[ 10.0, 6.0 ]\n*/\nfunction cadd( z1, z2 ) {\n\tvar re = real( z1 ) + real( z2 );\n\tvar im = imag( z1 ) + imag( z2 );\n\treturn new Complex128( re, im );\n}\n\n\n// EXPORTS //\n\nexport default cadd;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Float64Array from '@stdlib/array/float64';\n\n\n// MAIN //\n\n/**\n* Returns the real and imaginary components of a double-precision complex floating-point number.\n*\n* @param {Complex128} z - complex number\n* @returns {Float64Array} real and imaginary components\n*\n* @example\n* import Complex128 from '@stdlib/complex/float64/ctor';\n*\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var out = reim( z );\n* // returns <Float64Array>[ 5.0, 3.0 ]\n*/\nfunction reim( z ) {\n\tvar out = new Float64Array( 2 );\n\tout[ 0 ] = z.re;\n\tout[ 1 ] = z.im;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default reim;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns the complex conjugate of a single-precision complex floating-point number.\n*\n* @param {Complex64} z - complex number\n* @returns {Complex64} complex conjugate\n*\n* @example\n* import Complex64 from '@stdlib/complex/float32/ctor';\n*\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var v = conj( z );\n* // returns <Complex64>[ 5.0, -3.0 ]\n*/\nfunction conj( z ) {\n\treturn new z.constructor( z.re, -z.im );\n}\n\n\n// EXPORTS //\n\nexport default conj;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isString } from '@stdlib/assert/is-string';\nimport Complex64 from './../../../float32/ctor';\nimport replace from '@stdlib/string/base/replace';\nimport format from '@stdlib/string/format';\n\n\n// FUNCTIONS //\n\n/**\n* Matches a complex number string.\n*\n* @private\n* @returns {RegExp} regular expression\n*\n* @example\n* var re = regexp();\n* // returns /^([-+]?(\\d*\\.?\\d*(?:[eE][-+]?\\d+)?|Infinity|NaN)i?)?([-+])?((\\d*\\.?\\d*(?:[eE][-+]?\\d+)?|Infinity|NaN)i)?$/\n*/\nfunction regexp() {\n\treturn /^([-+]?(\\d*\\.?\\d*(?:[eE][-+]?\\d+)?|Infinity|NaN)i?)?([-+])?((\\d*\\.?\\d*(?:[eE][-+]?\\d+)?|Infinity|NaN)i)?$/;\n}\n\n\n// MAIN //\n\n/**\n* Parse a string representation of a complex number and returns a Complex64 instance.\n*\n* @param {string} str - string representation of a complex number\n* @throws {TypeError} must provide a string\n* @throws {Error} must provide a valid string representation of a complex number\n* @returns {Complex64} 64-bit complex number\n*\n* @example\n* var str = '1 + 2i';\n* var z = parseComplex64( str );\n* // returns <Complex64>\n*/\nfunction parseComplex64( str ) {\n\tvar match;\n\tvar re;\n\tvar im = 0;\n\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', str ) );\n\t}\n\n\tmatch = replace( str, /\\s/g, '' ).match( regexp() );\n\tif ( !match ) {\n\t\tthrow new Error( format( 'invalid argument. Unable to parse input string as a complex number. Value: `%s`.', str ) );\n\t}\n\n\t// Real part:\n\tre = ( match[1] && !match[1].endsWith( 'i' ) ) ? parseFloat( match[1] ) : 0;\n\n\t// Imaginary part:\n\tif ( match[4] ) {\n\t\tim = ( ( match[3] === '-' ) ? -1 : 1 ) * parseFloat( replace( match[4], /i$/, '' ) );\n\t} else if ( match[1] && match[1].endsWith( 'i' ) ) {\n\t\tim = parseFloat( replace( match[1], /i$/, '' ) );\n\t}\n\treturn new Complex64( re, im );\n}\n\n\n// EXPORTS //\n\nexport default parseComplex64;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNumber } from '@stdlib/assert/is-number';\nimport Complex64 from './../../../float32/ctor';\n\n\n// MAIN //\n\n/**\n* Revives a JSON-serialized 64-bit complex number.\n*\n* @param {string} key - key\n* @param {*} value - value\n* @returns {(*|Complex64)} value or 64-bit complex number\n*\n* @example\n* import parseJSON from '@stdlib/utils/parse-json';\n*\n* var str = '{\"type\":\"Complex64\",\"re\":5,\"im\":3}';\n*\n* var z = parseJSON( str, reviveComplex64 );\n* // returns <Complex64>\n*/\nfunction reviveComplex64( key, value ) {\n\tif (\n\t\tvalue &&\n\t\tvalue.type &&\n\t\tvalue.type === 'Complex64' &&\n\t\tisNumber( value.re ) &&\n\t\tisNumber( value.im )\n\t) {\n\t\treturn new Complex64( value.re, value.im );\n\t}\n\treturn value;\n}\n\n\n// EXPORTS //\n\nexport default reviveComplex64;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Add two double-precision complex floating-point numbers.\n*\n* @module @stdlib/complex/float64/base/add\n*\n* @example\n* import Complex128 from '@stdlib/complex/float64/ctor';\n* import cadd from '@stdlib/complex/float64/base/add';\n*\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var out = cadd( z, z );\n* // returns <Complex128>[ 10.0, 6.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\nimport strided from './strided.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\nsetReadOnly( main, 'strided', strided );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"assign\": \"main.assign\", \"strided\": \"main.strided\" }\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Adds two double-precision complex floating-point numbers and assigns results to a provided output array.\n*\n* @param {number} re1 - real component of the first complex number\n* @param {number} im1 - imaginary component of the first complex number\n* @param {number} re2 - real component of the second complex number\n* @param {number} im2 - imaginary component of the second complex number\n* @param {Collection} out - output array\n* @param {integer} strideOut - stride length\n* @param {NonNegativeInteger} offsetOut - starting index\n* @returns {Collection} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var out = assign( 5.0, 3.0, -2.0, 1.0, new Float64Array( 2 ), 1, 0 );\n* // returns <Float64Array>[ 3.0, 4.0 ]\n*/\nfunction assign( re1, im1, re2, im2, out, strideOut, offsetOut ) {\n\tout[ offsetOut ] = re1 + re2;\n\tout[ offsetOut+strideOut ] = im1 + im2;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default assign;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Adds two double-precision complex floating-point numbers stored in real-valued strided array views and assigns results to a provided strided output array.\n*\n* @param {Float64Array} z1 - first complex number view\n* @param {integer} strideZ1 - stride length for `z1`\n* @param {NonNegativeInteger} offsetZ1 - starting index for `z1`\n* @param {Float64Array} z2 - second complex number view\n* @param {integer} strideZ2 - stride length for `z2`\n* @param {NonNegativeInteger} offsetZ2 - starting index for `z2`\n* @param {Collection} out - output array\n* @param {integer} strideOut - stride length for `out`\n* @param {NonNegativeInteger} offsetOut - starting index for `out`\n* @returns {Collection} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var z1 = new Float64Array( [ 5.0, 3.0 ] );\n* var z2 = new Float64Array( [ -2.0, 1.0 ] );\n*\n* var out = strided( z1, 1, 0, z2, 1, 0, new Float64Array( 2 ), 1, 0 );\n* // returns <Float64Array>[ 3.0, 4.0 ]\n*/\nfunction strided( z1, strideZ1, offsetZ1, z2, strideZ2, offsetZ2, out, strideOut, offsetOut ) { // eslint-disable-line max-len\n\tout[ offsetOut ] = z1[ offsetZ1 ] + z2[ offsetZ2 ];\n\tout[ offsetOut+strideOut ] = z1[ offsetZ1+strideZ1 ] + z2[ offsetZ2+strideZ2 ]; // eslint-disable-line max-len\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default strided;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name isEqual\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/float64/base/assert/is-equal}\n*/\nimport isEqual from './../../../../float64/base/assert/is-equal';\nsetReadOnly( ns, 'isEqual', isEqual );\n\n/**\n* @name isNotEqual\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/float64/base/assert/is-not-equal}\n*/\nimport isNotEqual from './../../../../float64/base/assert/is-not-equal';\nsetReadOnly( ns, 'isNotEqual', isNotEqual );\n\n/**\n* @name isSameValue\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/float64/base/assert/is-same-value}\n*/\nimport isSameValue from './../../../../float64/base/assert/is-same-value';\nsetReadOnly( ns, 'isSameValue', isSameValue );\n\n/**\n* @name isSameValueZero\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/float64/base/assert/is-same-value-zero}\n*/\nimport isSameValueZero from './../../../../float64/base/assert/is-same-value-zero';\nsetReadOnly( ns, 'isSameValueZero', isSameValueZero );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Complex128 from './../../../../float64/ctor';\nimport real from './../../../../float64/real';\nimport imag from './../../../../float64/imag';\n\n\n// MAIN //\n\n/**\n* Multiplies two double-precision complex floating-point numbers.\n*\n* @param {Complex128} z1 - complex number\n* @param {Complex128} z2 - complex number\n* @returns {Complex128} result\n*\n* @example\n* import Complex128 from '@stdlib/complex/float64/ctor';\n*\n* var z1 = new Complex128( 5.0, 3.0 );\n* var z2 = new Complex128( -2.0, 1.0 );\n*\n* var out = mul( z1, z2 );\n* // returns <Complex128>[ -13.0, -1.0 ]\n*/\nfunction mul( z1, z2 ) {\n\tvar re1 = real( z1 );\n\tvar re2 = real( z2 );\n\tvar im1 = imag( z1 );\n\tvar im2 = imag( z2 );\n\tvar re = (re1*re2) - (im1*im2);\n\tvar im = (re1*im2) + (im1*re2);\n\treturn new Complex128( re, im );\n}\n\n\n// EXPORTS //\n\nexport default mul;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Complex128 from './../../../../float64/ctor';\nimport real from './../../../../float64/real';\nimport imag from './../../../../float64/imag';\n\n\n// MAIN //\n\n/**\n* Performs a multiply-add operation involving three double-precision complex floating-point numbers.\n*\n* @param {Complex128} alpha - complex number\n* @param {Complex128} x - complex number\n* @param {Complex128} y - complex number\n* @returns {Complex128} result\n*\n* @example\n* import Complex128 from '@stdlib/complex/float64/ctor';\n*\n* var z1 = new Complex128( 5.0, 3.0 );\n* var z2 = new Complex128( -2.0, 1.0 );\n* var z3 = new Complex128( 7.0, -8.0 );\n*\n* var out = muladd( z1, z2, z3 );\n* // returns <Complex128>[ -6.0, -9.0 ]\n*/\nfunction muladd( alpha, x, y ) {\n\tvar re0 = real( alpha );\n\tvar im0 = imag( alpha );\n\tvar re1 = real( x );\n\tvar im1 = imag( x );\n\tvar re2 = real( y );\n\tvar im2 = imag( y );\n\tvar re = (re0*re1) - (im0*im1) + re2;\n\tvar im = (re0*im1) + (im0*re1) + im2;\n\treturn new Complex128( re, im );\n}\n\n\n// EXPORTS //\n\nexport default muladd;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Complex128 from './../../../../float64/ctor';\nimport real from './../../../../float64/real';\nimport imag from './../../../../float64/imag';\n\n\n// MAIN //\n\n/**\n* Scales a double-precision complex floating-point number by a real-valued double-precision floating-point scalar constant.\n*\n* @param {number} alpha - scalar constant\n* @param {Complex128} z - complex number\n* @returns {Complex128} result\n*\n* @example\n* import Complex128 from '@stdlib/complex/float64/ctor';\n*\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var out = scale( 5.0, z );\n* // returns <Complex128>[ 25.0, 15.0 ]\n*/\nfunction scale( alpha, z ) {\n\treturn new Complex128( real( z ) * alpha, imag( z ) * alpha );\n}\n\n\n// EXPORTS //\n\nexport default scale;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport reim from './../../../../../float64/reim';\n\n\n// MAIN //\n\n/**\n* Tests whether two double-precision complex floating-point numbers are equal.\n*\n* @param {Complex128} z1 - first complex number\n* @param {Complex128} z2 - second complex number\n* @returns {boolean} result\n*\n* @example\n* import Complex128 from '@stdlib/complex/float64/ctor';\n*\n* var z1 = new Complex128( 5.0, 3.0 );\n* var z2 = new Complex128( 5.0, 3.0 );\n*\n* var v = isEqual( z1, z2 );\n* // returns true\n*/\nfunction isEqual( z1, z2 ) {\n\tvar parts1 = reim( z1 );\n\tvar parts2 = reim( z2 );\n\treturn (\n\t\tparts1[ 0 ] === parts2[ 0 ] &&\n\t\tparts1[ 1 ] === parts2[ 1 ]\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isEqual;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport reim from './../../../../../float64/reim';\n\n\n// MAIN //\n\n/**\n* Tests whether two double-precision complex floating-point numbers are not equal.\n*\n* @param {Complex128} z1 - first complex number\n* @param {Complex128} z2 - second complex number\n* @returns {boolean} result\n*\n* @example\n* import Complex128 from '@stdlib/complex/float64/ctor';\n*\n* var z1 = new Complex128( 5.0, 3.0 );\n* var z2 = new Complex128( 5.0, -3.0 );\n*\n* var v = isNotEqual( z1, z2 );\n* // returns true\n*/\nfunction isNotEqual( z1, z2 ) {\n\tvar parts1 = reim( z1 );\n\tvar parts2 = reim( z2 );\n\treturn (\n\t\tparts1[ 0 ] !== parts2[ 0 ] ||\n\t\tparts1[ 1 ] !== parts2[ 1 ]\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isNotEqual;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isSame from '@stdlib/number/float64/base/assert/is-same-value';\nimport reim from './../../../../../float64/reim';\n\n\n// MAIN //\n\n/**\n* Tests whether two double-precision complex floating-point numbers are the same value.\n*\n* ## Notes\n*\n* -   The function implements the [SameValue Algorithm][ecma-262-same-value-algorithm], as specified in ECMAScript 5.\n* -   In contrast to the strict equality operator `===`, `-0` and `+0` are distinguishable and `NaNs` are the same.\n*\n* [ecma-262-same-value-algorithm]: http://ecma-international.org/ecma-262/5.1/#sec-9.12\n*\n* @param {Complex128} z1 - first complex number\n* @param {Complex128} z2 - second complex number\n* @returns {boolean} result\n*\n* @example\n* import Complex128 from '@stdlib/complex/float64/ctor';\n*\n* var z1 = new Complex128( 5.0, 3.0 );\n* var z2 = new Complex128( 5.0, 3.0 );\n*\n* var v = isSameValue( z1, z2 );\n* // returns true\n*/\nfunction isSameValue( z1, z2 ) {\n\tvar parts1 = reim( z1 );\n\tvar parts2 = reim( z2 );\n\treturn (\n\t\tisSame( parts1[ 0 ], parts2[ 0 ] ) &&\n\t\tisSame( parts1[ 1 ], parts2[ 1 ] )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isSameValue;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isSame from '@stdlib/number/float64/base/assert/is-same-value-zero';\nimport reim from './../../../../../float64/reim';\n\n\n// MAIN //\n\n/**\n* Tests whether two double-precision complex floating-point numbers are the same value.\n*\n* ## Notes\n*\n* -   The function implements the SameValueZero Algorithm used by `TypedArray` and `ArrayBuffer` constructors, `Map` and `Set` operations, `String.prototype.includes`, and `Array.prototype.includes` since ES2016.\n* -   In contrast to the strict equality operator `===`, `NaNs` are considered the same value.\n*\n* @param {Complex128} z1 - first complex number\n* @param {Complex128} z2 - second complex number\n* @returns {boolean} result\n*\n* @example\n* import Complex128 from '@stdlib/complex/float64/ctor';\n*\n* var z1 = new Complex128( 5.0, 3.0 );\n* var z2 = new Complex128( 5.0, 3.0 );\n*\n* var v = isSameValueZero( z1, z2 );\n* // returns true\n*/\nfunction isSameValueZero( z1, z2 ) {\n\tvar parts1 = reim( z1 );\n\tvar parts2 = reim( z2 );\n\treturn (\n\t\tisSame( parts1[ 0 ], parts2[ 0 ] ) &&\n\t\tisSame( parts1[ 1 ], parts2[ 1 ] )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isSameValueZero;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Multiply two double-precision complex floating-point numbers.\n*\n* @module @stdlib/complex/float64/base/mul\n*\n* @example\n* import Complex128 from '@stdlib/complex/float64/ctor';\n* import mul from '@stdlib/complex/float64/base/mul';\n*\n* var z1 = new Complex128( 5.0, 3.0 );\n* var z2 = new Complex128( -2.0, 1.0 );\n*\n* var out = mul( z1, z2 );\n* // returns <Complex128>[ -13.0, -1.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\nimport strided from './strided.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\nsetReadOnly( main, 'strided', strided );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"assign\": \"main.assign\", \"strided\": \"main.strided\" }\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Multiplies two double-precision complex floating-point numbers and assigns results to a provided output array.\n*\n* @param {number} re1 - real component of the first complex number\n* @param {number} im1 - imaginary component of the first complex number\n* @param {number} re2 - real component of the second complex number\n* @param {number} im2 - imaginary component of the second complex number\n* @param {Collection} out - output array\n* @param {integer} strideOut - stride length\n* @param {NonNegativeInteger} offsetOut - starting index\n* @returns {Collection} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var out = assign( 5.0, 3.0, -2.0, 1.0, new Float64Array( 2 ), 1, 0 );\n* // returns <Float64Array>[ -13.0, -1.0 ]\n*/\nfunction assign( re1, im1, re2, im2, out, strideOut, offsetOut ) {\n\tout[ offsetOut ] = (re1*re2) - (im1*im2);\n\tout[ offsetOut+strideOut ] = (re1*im2) + (im1*re2);\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default assign;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Multiplies two double-precision complex floating-point numbers stored in real-valued strided array views and assigns results to a provided strided output array.\n*\n* @param {Float64Array} z1 - first complex number view\n* @param {integer} strideZ1 - stride length for `z1`\n* @param {NonNegativeInteger} offsetZ1 - starting index for `z1`\n* @param {Float64Array} z2 - second complex number view\n* @param {integer} strideZ2 - stride length for `z2`\n* @param {NonNegativeInteger} offsetZ2 - starting index for `z2`\n* @param {Collection} out - output array\n* @param {integer} strideOut - stride length for `out`\n* @param {NonNegativeInteger} offsetOut - starting index for `out`\n* @returns {Collection} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var z1 = new Float64Array( [ 5.0, 3.0 ] );\n* var z2 = new Float64Array( [ -2.0, 1.0 ] );\n*\n* var out = strided( z1, 1, 0, z2, 1, 0, new Float64Array( 2 ), 1, 0 );\n* // returns <Float64Array>[ -13.0, -1.0 ]\n*/\nfunction strided( z1, strideZ1, offsetZ1, z2, strideZ2, offsetZ2, out, strideOut, offsetOut ) { // eslint-disable-line max-len\n\tvar re1 = z1[ offsetZ1 ];\n\tvar im1 = z1[ offsetZ1+strideZ1 ];\n\tvar re2 = z2[ offsetZ2 ];\n\tvar im2 = z2[ offsetZ2+strideZ2 ];\n\tout[ offsetOut ] = (re1*re2) - (im1*im2);\n\tout[ offsetOut+strideOut ] = (re1*im2) + (im1*re2);\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default strided;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Perform a multiply-add operation involving three double-precision complex floating-point numbers.\n*\n* @module @stdlib/complex/float64/base/mul-add\n*\n* @example\n* import Complex128 from '@stdlib/complex/float64/ctor';\n* import muladd from '@stdlib/complex/float64/base/mul-add';\n*\n* var z1 = new Complex128( 5.0, 3.0 );\n* var z2 = new Complex128( -2.0, 1.0 );\n* var z3 = new Complex128( 7.0, -8.0 );\n*\n* var out = muladd( z1, z2, z3 );\n* // returns <Complex128>[ -6.0, -9.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\nimport strided from './strided.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\nsetReadOnly( main, 'strided', strided );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"assign\": \"main.assign\", \"strided\": \"main.strided\" }\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Performs a multiply-add operation involving three double-precision complex floating-point numbers and assigns the results to an output strided array.\n*\n* @param {number} ar - real component of the first complex number\n* @param {number} ai - imaginary component of the first complex number\n* @param {number} xr - real component of the second complex number\n* @param {number} xi - imaginary component of the second complex number\n* @param {number} yr - real component of the third complex number\n* @param {number} yi - imaginary component of the third complex number\n* @param {Collection} out - output array\n* @param {integer} strideOut - stride length\n* @param {NonNegativeInteger} offsetOut - starting index\n* @returns {Collection} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var out = assign( 5.0, 3.0, -2.0, 1.0, 7.0, -8.0, new Float64Array( 2 ), 1, 0 );\n* // returns <Float64Array>[ -6.0, -9.0 ]\n*/\nfunction assign( ar, ai, xr, xi, yr, yi, out, strideOut, offsetOut ) {\n\tout[ offsetOut ] = (ar*xr) - (ai*xi) + yr;\n\tout[ offsetOut+strideOut ] = (ar*xi) + (ai*xr) + yi;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default assign;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Performs a multiply-add operation involving three double-precision complex floating-point numbers stored in real-valued strided array views and assigns results to a provided strided output array.\n*\n* @param {Float64Array} alpha - first complex number view\n* @param {integer} strideA - stride length for `alpha`\n* @param {NonNegativeInteger} offsetA - starting index for `alpha`\n* @param {Float64Array} x - second complex number view\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} y - third complex number view\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @param {Collection} out - output array\n* @param {integer} strideOut - stride length for `out`\n* @param {NonNegativeInteger} offsetOut - starting index for `out`\n* @returns {Collection} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var alpha = new Float64Array( [ 5.0, 3.0 ] );\n* var x = new Float64Array( [ -2.0, 1.0 ] );\n* var y = new Float64Array( [ 7.0, -8.0 ] );\n*\n* var out = strided( alpha, 1, 0, x, 1, 0, y, 1, 0, new Float64Array( 2 ), 1, 0 );\n* // returns <Float64Array>[ -6.0, -9.0 ]\n*/\nfunction strided( alpha, strideA, offsetA, x, strideX, offsetX, y, strideY, offsetY, out, strideOut, offsetOut ) { // eslint-disable-line max-len, max-params\n\tvar re0 = alpha[ offsetA ];\n\tvar im0 = alpha[ offsetA+strideA ];\n\tvar re1 = x[ offsetX ];\n\tvar im1 = x[ offsetX+strideX ];\n\tvar re2 = y[ offsetY ];\n\tvar im2 = y[ offsetY+strideY ];\n\tout[ offsetOut ] = (re0*re1) - (im0*im1) + re2;\n\tout[ offsetOut+strideOut ] = (re0*im1) + (im0*re1) + im2;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default strided;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Scale a double-precision complex floating-point number by a real-valued double-precision floating-point scalar constant.\n*\n* @module @stdlib/complex/float64/base/scale\n*\n* @example\n* import Complex128 from '@stdlib/complex/float64/ctor';\n* import scale from '@stdlib/complex/float64/base/scale';\n*\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var out = scale( 5.0, z );\n* // returns <Complex128>[ 25.0, 15.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\nimport strided from './strided.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\nsetReadOnly( main, 'strided', strided );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"assign\": \"main.assign\", \"strided\": \"main.strided\" }\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Scales a double-precision complex floating-point number by a real-valued double-precision floating-point scalar constant and assigns results to a provided output array.\n*\n* @param {number} alpha - scalar constant\n* @param {number} re - real component of the complex number\n* @param {number} im - imaginary component of the complex number\n* @param {Collection} out - output array\n* @param {integer} strideOut - stride length\n* @param {NonNegativeInteger} offsetOut - starting index\n* @returns {Collection} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var out = assign( 5.0, 5.0, 3.0, new Float64Array( 2 ), 1, 0 );\n* // returns <Float64Array>[ 25.0, 15.0 ]\n*/\nfunction assign( alpha, re, im, out, strideOut, offsetOut ) {\n\tout[ offsetOut ] = re * alpha;\n\tout[ offsetOut+strideOut ] = im * alpha;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default assign;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Scales a double-precision complex floating-point number stored in a real-valued strided array view by a real-valued double-precision floating-point scalar constant and assigns results to a provided strided output array.\n*\n* @param {number} alpha - scalar constant\n* @param {Float64Array} z - complex number view\n* @param {integer} strideZ - stride length for `z`\n* @param {NonNegativeInteger} offsetZ - starting index for `z`\n* @param {Collection} out - output array\n* @param {integer} strideOut - stride length for `out`\n* @param {NonNegativeInteger} offsetOut - starting index for `out`\n* @returns {Collection} output array\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var z = new Float64Array( [ 5.0, 3.0 ] );\n*\n* var out = strided( 5.0, z, 1, 0, new Float64Array( 2 ), 1, 0 );\n* // returns <Float64Array>[ 25.0, 15.0 ]\n*/\nfunction strided( alpha, z, strideZ, offsetZ, out, strideOut, offsetOut ) {\n\tout[ offsetOut ] = alpha * z[ offsetZ ];\n\tout[ offsetOut+strideOut ] = alpha * z[ offsetZ+strideZ ];\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default strided;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name add\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/float64/base/add}\n*/\nimport add from './../../../float64/base/add';\nsetReadOnly( ns, 'add', add );\n\n/**\n* @name assert\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/complex/float64/base/assert}\n*/\nimport assert from './../../../float64/base/assert';\nsetReadOnly( ns, 'assert', assert );\n\n/**\n* @name mul\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/float64/base/mul}\n*/\nimport mul from './../../../float64/base/mul';\nsetReadOnly( ns, 'mul', mul );\n\n/**\n* @name muladd\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/float64/base/mul-add}\n*/\nimport muladd from './../../../float64/base/mul-add';\nsetReadOnly( ns, 'muladd', muladd );\n\n/**\n* @name scale\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/float64/base/scale}\n*/\nimport scale from './../../../float64/base/scale';\nsetReadOnly( ns, 'scale', scale );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name base\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/complex/float64/base}\n*/\nimport base from './../../float64/base';\nsetReadOnly( ns, 'base', base );\n\n/**\n* @name conj\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/float64/conj}\n*/\nimport conj from './../../float64/conj';\nsetReadOnly( ns, 'conj', conj );\n\n/**\n* @name Complex128\n* @memberof ns\n* @readonly\n* @constructor\n* @see {@link module:@stdlib/complex/float64/ctor}\n*/\nimport Complex128 from './../../float64/ctor';\nsetReadOnly( ns, 'Complex128', Complex128 );\n\n/**\n* @name imag\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/float64/imag}\n*/\nimport imag from './../../float64/imag';\nsetReadOnly( ns, 'imag', imag );\n\n/**\n* @name parseComplex128\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/float64/parse}\n*/\nimport parseComplex128 from './../../float64/parse';\nsetReadOnly( ns, 'parseComplex128', parseComplex128 );\n\n/**\n* @name real\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/float64/real}\n*/\nimport real from './../../float64/real';\nsetReadOnly( ns, 'real', real );\n\n/**\n* @name reim\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/float64/reim}\n*/\nimport reim from './../../float64/reim';\nsetReadOnly( ns, 'reim', reim );\n\n/**\n* @name reviveComplex128\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/float64/reviver}\n*/\nimport reviveComplex128 from './../../float64/reviver';\nsetReadOnly( ns, 'reviveComplex128', reviveComplex128 );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport real from './../../../float64/real';\nimport imag from './../../../float64/imag';\nimport Complex128 from './../../../float64/ctor';\n\n/**\n* Returns the complex conjugate of a double-precision complex floating-point number.\n*\n* @param {Complex128} z - complex number\n* @returns {Complex128} complex conjugate\n*\n* @example\n* import Complex128 from '@stdlib/complex/float64/ctor';\n*\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var v = conj( z );\n* // returns <Complex128>[ 5.0, -3.0 ]\n*/\nfunction conj( z ) {\n\treturn new Complex128( real( z ), -imag( z ) );\n}\n\n\n// EXPORTS //\n\nexport default conj;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Complex128 from './../../../float64/ctor';\nimport { isPrimitive as isString } from '@stdlib/assert/is-string';\nimport replace from '@stdlib/string/base/replace';\nimport format from '@stdlib/string/format';\n\n\n// FUNCTIONS //\n\n/**\n* Matches a complex number string.\n*\n* @private\n* @returns {RegExp} regular expression\n*\n* @example\n* var re = regexp();\n* // returns /^([-+]?(\\d*\\.?\\d*(?:[eE][-+]?\\d+)?|Infinity|NaN)i?)?([-+])?((\\d*\\.?\\d*(?:[eE][-+]?\\d+)?|Infinity|NaN)i)?$/\n*/\nfunction regexp() {\n\treturn /^([-+]?(\\d*\\.?\\d*(?:[eE][-+]?\\d+)?|Infinity|NaN)i?)?([-+])?((\\d*\\.?\\d*(?:[eE][-+]?\\d+)?|Infinity|NaN)i)?$/;\n}\n\n\n// MAIN //\n\n/**\n* Parse a string representation of a complex number and returns a Complex128 instance.\n*\n* @param {string} str - string representation of a complex number\n* @throws {TypeError} must provide a string\n* @throws {Error} must provide a valid string representation of a complex number\n* @returns {Complex128} 128-bit complex number\n*\n* @example\n* var str = '1 + 2i';\n* var z = parseComplex128( str );\n* // returns <Complex128>\n*/\nfunction parseComplex128( str ) {\n\tvar match;\n\tvar re;\n\tvar im = 0;\n\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', str ) );\n\t}\n\n\tmatch = replace( str, /\\s/g, '' ).match( regexp() );\n\tif ( !match ) {\n\t\tthrow new Error( format( 'invalid argument. Unable to parse input string as a complex number. Value: `%s`.', str ) );\n\t}\n\n\t// Real part:\n\tre = ( match[1] && !match[1].endsWith( 'i' ) ) ? parseFloat( match[1] ) : 0;\n\n\t// Imaginary part:\n\tif ( match[4] ) {\n\t\tim = ( ( match[3] === '-' ) ? -1 : 1 ) * parseFloat( replace( match[4], /i$/, '' ) );\n\t} else if ( match[1] && match[1].endsWith( 'i' ) ) {\n\t\tim = parseFloat( replace( match[1], /i$/, '' ) );\n\t}\n\treturn new Complex128( re, im );\n}\n\n\n// EXPORTS //\n\nexport default parseComplex128;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNumber } from '@stdlib/assert/is-number';\nimport Complex128 from './../../../float64/ctor';\n\n\n// MAIN //\n\n/**\n* Revives a JSON-serialized 128-bit complex number.\n*\n* @param {string} key - key\n* @param {*} value - value\n* @returns {(*|Complex128)} value or 128-bit complex number\n*\n* @example\n* import parseJSON from '@stdlib/utils/parse-json';\n*\n* var str = '{\"type\":\"Complex128\",\"re\":5,\"im\":3}';\n*\n* var z = parseJSON( str, reviveComplex128 );\n* // returns <Complex128>\n*/\nfunction reviveComplex128( key, value ) {\n\tif (\n\t\tvalue &&\n\t\tvalue.type &&\n\t\tvalue.type === 'Complex128' &&\n\t\tisNumber( value.re ) &&\n\t\tisNumber( value.im )\n\t) {\n\t\treturn new Complex128( value.re, value.im );\n\t}\n\treturn value;\n}\n\n\n// EXPORTS //\n\nexport default reviveComplex128;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport objectKeys from '@stdlib/utils/keys';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport PROMOTION_RULES from './promotion_rules.json';\n\n\n// FUNCTIONS //\n\n/**\n* Generates a full table of promotion rules.\n*\n* @private\n* @returns {Object} table\n*/\nfunction generateFullTable() {\n\tvar dtypes;\n\tvar ntypes;\n\tvar out;\n\tvar tmp;\n\tvar dt1;\n\tvar dt2;\n\tvar o;\n\tvar j;\n\tvar i;\n\n\tout = {};\n\tdtypes = objectKeys( PROMOTION_RULES );\n\tntypes = dtypes.length;\n\tfor ( i = 0; i < ntypes; i++ ) {\n\t\tdt1 = dtypes[ i ];\n\t\to = PROMOTION_RULES[ dt1 ];\n\t\ttmp = {};\n\t\tfor ( j = 0; j < ntypes; j++ ) {\n\t\t\tdt2 = dtypes[ j ];\n\t\t\ttmp[ dt2 ] = o[ dt2 ];\n\t\t}\n\t\tout[ dt1 ] = tmp;\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Returns the complex number data type with the smallest size and closest \"kind\" to which data types can be safely cast.\n*\n* @param {string} [dtype1] - data type\n* @param {string} [dtype2] - data type\n* @returns {(Object|integer|string|null)} promotion rule(s) or null\n*\n* @example\n* var table = promotionRules();\n* // returns {...}\n*\n* @example\n* var dt = promotionRules( 'complex128', 'complex64' );\n* // returns 'complex128'\n*\n* @example\n* var dt = promotionRules( 'complex128', 'foo' );\n* // returns null\n*/\nfunction promotionRules( dtype1, dtype2 ) {\n\tvar o;\n\tif ( arguments.length === 0 ) {\n\t\treturn generateFullTable();\n\t}\n\tif ( hasOwnProp( PROMOTION_RULES, dtype1 ) ) {\n\t\to = PROMOTION_RULES[ dtype1 ];\n\t\tif ( hasOwnProp( o, dtype2 ) ) {\n\t\t\treturn o[ dtype2 ];\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default promotionRules;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Complex128 from './../../float64/ctor';\nimport Complex64 from './../../float32/ctor';\n\n\n// MAIN //\n\nvar ctors = {\n\t'Complex128': Complex128,\n\t'Complex64': Complex64\n};\n\n\n// EXPORTS //\n\nexport default ctors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNumber } from '@stdlib/assert/is-number';\nimport ctors from './ctors.js';\n\n\n// MAIN //\n\n/**\n* Revives a JSON-serialized complex number.\n*\n* @param {string} key - key\n* @param {*} value - value\n* @returns {(*|Complex)} value or complex number\n*\n* @example\n* import parseJSON from '@stdlib/utils/parse-json';\n*\n* var str = '{\"type\":\"Complex128\",\"re\":5,\"im\":3}';\n*\n* var z = parseJSON( str, reviveComplex );\n* // returns <Complex128>\n*/\nfunction reviveComplex( key, value ) {\n\tvar ctor;\n\tif (\n\t\tvalue &&\n\t\tvalue.type &&\n\t\tisNumber( value.re ) &&\n\t\tisNumber( value.im )\n\t) {\n\t\tctor = ctors[ value.type ];\n\t\tif ( ctor ) {\n\t\t\treturn new ctor( value.re, value.im );\n\t\t}\n\t}\n\treturn value;\n}\n\n\n// EXPORTS //\n\nexport default reviveComplex;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name base\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/complex/base}\n*/\nimport base from './../base';\nsetReadOnly( ns, 'base', base );\n\n/**\n* @name complex\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/cmplx}\n*/\nimport complex from './../cmplx';\nsetReadOnly( ns, 'complex', complex );\n\n/**\n* @name ctors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/ctors}\n*/\nimport ctors from './../ctors';\nsetReadOnly( ns, 'ctors', ctors );\n\n/**\n* @name dtype\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/dtype}\n*/\nimport dtype from './../dtype';\nsetReadOnly( ns, 'dtype', dtype );\n\n/**\n* @name dtypes\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/dtypes}\n*/\nimport dtypes from './../dtypes';\nsetReadOnly( ns, 'dtypes', dtypes );\n\n/**\n* @name float32\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/complex/float32}\n*/\nimport float32 from './../float32';\nsetReadOnly( ns, 'float32', float32 );\n\n/**\n* @name float64\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/complex/float64}\n*/\nimport float64 from './../float64';\nsetReadOnly( ns, 'float64', float64 );\n\n/**\n* @name promotionRules\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/promotion-rules}\n*/\nimport promotionRules from './../promotion-rules';\nsetReadOnly( ns, 'promotionRules', promotionRules );\n\n/**\n* @name reviveComplex\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/reviver}\n*/\nimport reviveComplex from './../reviver';\nsetReadOnly( ns, 'reviveComplex', reviveComplex );\n\n\n// EXPORTS //\n\nexport default ns;\n"],"names":["T","ns","Complex64","real","imag","this","TypeError","isNumber","format","defineProperty","configurable","enumerable","writable","value","float64ToFloat32","Complex128","setReadOnly","fcn","nargs","ctor","isFunction","isNonNegativeInteger","r","x","y","z","w","v","args","i","arguments","length","push","apply","prototype","str","re","im","out","ctors","complex64","complex128","dtype","table","TABLE","float64","float32","DEFAULT_CTOR","complex","ctor2dtypes","dtypes","DTYPES","slice","CTORS","NTYPES","ctor2dtype","constructorName","reim","Float32Array","mul","z1","z2","re1","realf","re2","im1","imagf","im2","f32","scale","alpha","parts1","reimf","parts2","isSame","main","strideOut","offsetOut","strideZ1","offsetZ1","strideZ2","offsetZ2","strideZ","offsetZ","assert","cadd","Float64Array","base","constructor","match","isString","replace","Error","endsWith","parseFloat","key","type","muladd","re0","im0","ar","ai","xr","xi","yr","yi","strideA","offsetA","strideX","offsetX","strideY","offsetY","add","promotionRules","dtype1","dtype2","o","ntypes","tmp","dt1","dt2","j","objectKeys","PROMOTION_RULES","generateFullTable","hasOwnProp","reviveComplex"],"mappings":"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"}