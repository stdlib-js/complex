{
  "version": 3,
  "sources": ["../base/cast-return/lib/main.js", "../base/cast-return/lib/index.js", "../base/wrap-function/lib/main.js", "../base/wrap-function/lib/index.js", "../base/lib/index.js", "../float64/lib/tostring.js", "../float64/lib/tojson.js", "../float64/lib/main.js", "../float64/lib/index.js", "../float32/lib/tostring.js", "../float32/lib/tojson.js", "../float32/lib/main.js", "../float32/lib/index.js", "../cmplx/lib/ctors.js", "../cmplx/lib/main.js", "../cmplx/lib/index.js", "../conj/lib/main.js", "../conj/lib/index.js", "../conjf/lib/main.js", "../conjf/lib/index.js", "../ctors/lib/ctors.js", "../ctors/lib/main.js", "../ctors/lib/index.js", "../dtype/lib/ctor2dtype.js", "../dtype/lib/ctors.js", "../dtype/lib/dtypes.js", "../dtype/lib/main.js", "../dtype/lib/index.js", "../dtypes/lib/dtypes.json", "../dtypes/lib/main.js", "../dtypes/lib/index.js", "../imag/lib/main.js", "../imag/lib/index.js", "../imagf/lib/main.js", "../imagf/lib/index.js", "../promotion-rules/lib/promotion_rules.json", "../promotion-rules/lib/main.js", "../promotion-rules/lib/index.js", "../real/lib/main.js", "../real/lib/index.js", "../realf/lib/main.js", "../realf/lib/index.js", "../reim/lib/main.js", "../reim/lib/index.js", "../reimf/lib/main.js", "../reimf/lib/index.js", "../reviver/lib/ctors.js", "../reviver/lib/main.js", "../reviver/lib/index.js", "../reviver-float32/lib/main.js", "../reviver-float32/lib/index.js", "../reviver-float64/lib/main.js", "../reviver-float64/lib/index.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable valid-typeof */\n\n'use strict';\n\n// MODULES //\n\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// VARIABLES //\n\nvar T = 'number';\n\n\n// FUNCTIONS //\n\n/**\n* Wraps a function and casts a function's return value to a complex number.\n*\n* ## Notes\n*\n* -   The returned function **assumes** that the wrapped function returns either a real or complex number.\n* -   The returned function **assumes** that, if a return value is non-numeric (i.e., not of type `number`), then the return value is a complex number. The returned function does **not** verify that non-numeric return values are, in fact, complex number objects. The returned function returns non-numeric return values from the wrapped function without modification.\n*\n* @param {Function} fcn - function to wrap\n* @param {NonNegativeInteger} nargs - number of arguments\n* @param {Function} ctor - complex number constructor\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} second argument must be a nonnegative integer\n* @throws {TypeError} third argument must be a constructor function\n* @returns {Function} wrapped function\n*\n* @example\n* var Complex64 = require( '@stdlib/complex/float32' );\n* var addf = require( '@stdlib/math/base/ops/addf' );\n* var realf = require( '@stdlib/complex/realf' );\n* var imagf = require( '@stdlib/complex/imagf' );\n*\n* var f = wrap( addf, 2, Complex64 );\n*\n* // ...\n*\n* var z = f( 3.0, 4.0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 7.0\n*\n* var im = imagf( z );\n* // returns 0.0\n*/\nfunction wrap( fcn, nargs, ctor ) {\n\tvar fcns;\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', fcn ) );\n\t}\n\tif ( !isNonNegativeInteger( nargs ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a nonnegative integer. Value: `%s`.', nargs ) );\n\t}\n\tif ( !isFunction( ctor ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a constructor function. Value: `%s`.', ctor ) );\n\t}\n\tfcns = [ fcn0, fcn1, fcn2, fcn3, fcn4, fcn5 ];\n\treturn ( nargs <= 5 ) ? fcns[ nargs ] : fcnN;\n\n\t/**\n\t* Invokes a nullary function and returns a complex number.\n\t*\n\t* @private\n\t* @returns {Complex} result\n\t*/\n\tfunction fcn0() {\n\t\tvar r = fcn();\n\t\tif ( typeof r === T ) {\n\t\t\treturn new ctor( r, 0.0 );\n\t\t}\n\t\treturn r;\n\t}\n\n\t/**\n\t* Invokes a unary function and returns a complex number.\n\t*\n\t* @private\n\t* @param {*} x - input value\n\t* @returns {Complex} result\n\t*/\n\tfunction fcn1( x ) {\n\t\tvar r = fcn( x );\n\t\tif ( typeof r === T ) {\n\t\t\treturn new ctor( r, 0.0 );\n\t\t}\n\t\treturn r;\n\t}\n\n\t/**\n\t* Invokes a binary function and returns a complex number.\n\t*\n\t* @private\n\t* @param {*} x - input value\n\t* @param {*} y - input value\n\t* @returns {Complex} result\n\t*/\n\tfunction fcn2( x, y ) {\n\t\tvar r = fcn( x, y );\n\t\tif ( typeof r === T ) {\n\t\t\treturn new ctor( r, 0.0 );\n\t\t}\n\t\treturn r;\n\t}\n\n\t/**\n\t* Invokes a ternary function and returns a complex number.\n\t*\n\t* @private\n\t* @param {*} x - input value\n\t* @param {*} y - input value\n\t* @param {*} z - input value\n\t* @returns {Complex} result\n\t*/\n\tfunction fcn3( x, y, z ) {\n\t\tvar r = fcn( x, y, z );\n\t\tif ( typeof r === T ) {\n\t\t\treturn new ctor( r, 0.0 );\n\t\t}\n\t\treturn r;\n\t}\n\n\t/**\n\t* Invokes a quaternary function and returns a complex number.\n\t*\n\t* @private\n\t* @param {*} x - input value\n\t* @param {*} y - input value\n\t* @param {*} z - input value\n\t* @param {*} w - input value\n\t* @returns {Complex} result\n\t*/\n\tfunction fcn4( x, y, z, w ) {\n\t\tvar r = fcn( x, y, z, w );\n\t\tif ( typeof r === T ) {\n\t\t\treturn new ctor( r, 0.0 );\n\t\t}\n\t\treturn r;\n\t}\n\n\t/**\n\t* Invokes a quinary function and returns a complex number.\n\t*\n\t* @private\n\t* @param {*} x - input value\n\t* @param {*} y - input value\n\t* @param {*} z - input value\n\t* @param {*} w - input value\n\t* @param {*} v - input value\n\t* @returns {Complex} result\n\t*/\n\tfunction fcn5( x, y, z, w, v ) {\n\t\tvar r = fcn( x, y, z, w, v );\n\t\tif ( typeof r === T ) {\n\t\t\treturn new ctor( r, 0.0 );\n\t\t}\n\t\treturn r;\n\t}\n\n\t/**\n\t* Invokes a function and returns a complex number.\n\t*\n\t* @private\n\t* @param {...*} args - input values\n\t* @returns {Complex} result\n\t*/\n\tfunction fcnN() {\n\t\tvar args;\n\t\tvar r;\n\t\tvar i;\n\n\t\targs = [];\n\t\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\t\targs.push( arguments[ i ] );\n\t\t}\n\t\tr = fcn.apply( null, args );\n\t\tif ( typeof r === T ) {\n\t\t\treturn new ctor( r, 0.0 );\n\t\t}\n\t\treturn r;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = wrap;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Wrap a function and casts a function's return value to a complex number.\n*\n* @module @stdlib/complex/base/cast-return\n*\n* @example\n* var Complex64 = require( '@stdlib/complex/float32' );\n* var addf = require( '@stdlib/math/base/ops/addf' );\n* var realf = require( '@stdlib/complex/realf' );\n* var imagf = require( '@stdlib/complex/imagf' );\n* var castReturn = require( '@stdlib/complex/base/cast-return' );\n*\n* var f = castReturn( addf, 2, Complex64 );\n*\n* // ...\n*\n* var z = f( 3.0, 4.0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 7.0\n*\n* var im = imagf( z );\n* // returns 0.0\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable valid-typeof */\n\n'use strict';\n\n// MODULES //\n\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// VARIABLES //\n\nvar T = 'number';\n\n\n// FUNCTIONS //\n\n/**\n* Wraps a function accepting complex number arguments to support providing both real and complex numbers.\n*\n* ## Notes\n*\n* -   The returned function **assumes** that the wrapped function accepts **only** complex number input arguments (i.e., every argument must be a complex number).\n* -   The returned function **assumes** that, if an input argument is non-numeric (i.e., not of type `number`), then the input argument is a complex number. The returned function does **not** verify that non-numeric input arguments are, in fact, complex number objects. The returned function passes non-numeric input arguments to the wrapped function without modification.\n*\n* @param {Function} fcn - function to wrap\n* @param {NonNegativeInteger} nargs - number of arguments\n* @param {Function} ctor - complex number constructor\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} second argument must be a nonnegative integer\n* @throws {TypeError} third argument must be a constructor function\n* @returns {Function} wrapped function\n*\n* @example\n* var Complex64 = require( '@stdlib/complex/float32' );\n* var caddf = require( '@stdlib/math/base/ops/caddf' );\n* var realf = require( '@stdlib/complex/realf' );\n* var imagf = require( '@stdlib/complex/imagf' );\n*\n* var f = wrap( caddf, 2, Complex64 );\n*\n* // ...\n*\n* var z = f( 3.0, 4.0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 7.0\n*\n* var im = imagf( z );\n* // returns 0.0\n*/\nfunction wrap( fcn, nargs, ctor ) {\n\tvar fcns;\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', fcn ) );\n\t}\n\tif ( !isNonNegativeInteger( nargs ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a nonnegative integer. Value: `%s`.', nargs ) );\n\t}\n\tif ( !isFunction( ctor ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a constructor function. Value: `%s`.', ctor ) );\n\t}\n\tfcns = [ fcn0, fcn1, fcn2, fcn3, fcn4, fcn5 ];\n\treturn ( nargs <= 5 ) ? fcns[ nargs ] : fcnN;\n\n\t/**\n\t* Invokes a nullary function.\n\t*\n\t* @private\n\t* @returns {*} result\n\t*/\n\tfunction fcn0() {\n\t\treturn fcn();\n\t}\n\n\t/**\n\t* Invokes a unary function accepting complex numbers.\n\t*\n\t* @private\n\t* @param {(number|Complex)} x - input value\n\t* @returns {*} result\n\t*/\n\tfunction fcn1( x ) {\n\t\tif ( typeof x === T ) {\n\t\t\tx = new ctor( x, 0.0 );\n\t\t}\n\t\treturn fcn( x );\n\t}\n\n\t/**\n\t* Invokes a binary function accepting complex numbers.\n\t*\n\t* @private\n\t* @param {(number|Complex)} x - input value\n\t* @param {(number|Complex)} y - input value\n\t* @returns {*} result\n\t*/\n\tfunction fcn2( x, y ) {\n\t\tif ( typeof x === T ) {\n\t\t\tx = new ctor( x, 0.0 );\n\t\t}\n\t\tif ( typeof y === T ) {\n\t\t\ty = new ctor( y, 0.0 );\n\t\t}\n\t\treturn fcn( x, y );\n\t}\n\n\t/**\n\t* Invokes a ternary function accepting complex numbers.\n\t*\n\t* @private\n\t* @param {(number|Complex)} x - input value\n\t* @param {(number|Complex)} y - input value\n\t* @param {(number|Complex)} z - input value\n\t* @returns {*} result\n\t*/\n\tfunction fcn3( x, y, z ) {\n\t\tif ( typeof x === T ) {\n\t\t\tx = new ctor( x, 0.0 );\n\t\t}\n\t\tif ( typeof y === T ) {\n\t\t\ty = new ctor( y, 0.0 );\n\t\t}\n\t\tif ( typeof z === T ) {\n\t\t\tz = new ctor( z, 0.0 );\n\t\t}\n\t\treturn fcn( x, y, z );\n\t}\n\n\t/**\n\t* Invokes a quaternary function accepting complex numbers.\n\t*\n\t* @private\n\t* @param {(number|Complex)} x - input value\n\t* @param {(number|Complex)} y - input value\n\t* @param {(number|Complex)} z - input value\n\t* @param {(number|Complex)} w - input value\n\t* @returns {*} result\n\t*/\n\tfunction fcn4( x, y, z, w ) {\n\t\tif ( typeof x === T ) {\n\t\t\tx = new ctor( x, 0.0 );\n\t\t}\n\t\tif ( typeof y === T ) {\n\t\t\ty = new ctor( y, 0.0 );\n\t\t}\n\t\tif ( typeof z === T ) {\n\t\t\tz = new ctor( z, 0.0 );\n\t\t}\n\t\tif ( typeof w === T ) {\n\t\t\tw = new ctor( w, 0.0 );\n\t\t}\n\t\treturn fcn( x, y, z, w );\n\t}\n\n\t/**\n\t* Invokes a quinary function accepting complex numbers.\n\t*\n\t* @private\n\t* @param {(number|Complex)} x - input value\n\t* @param {(number|Complex)} y - input value\n\t* @param {(number|Complex)} z - input value\n\t* @param {(number|Complex)} w - input value\n\t* @param {(number|Complex)} v - input value\n\t* @returns {*} result\n\t*/\n\tfunction fcn5( x, y, z, w, v ) {\n\t\tif ( typeof x === T ) {\n\t\t\tx = new ctor( x, 0.0 );\n\t\t}\n\t\tif ( typeof y === T ) {\n\t\t\ty = new ctor( y, 0.0 );\n\t\t}\n\t\tif ( typeof z === T ) {\n\t\t\tz = new ctor( z, 0.0 );\n\t\t}\n\t\tif ( typeof w === T ) {\n\t\t\tw = new ctor( w, 0.0 );\n\t\t}\n\t\tif ( typeof v === T ) {\n\t\t\tv = new ctor( v, 0.0 );\n\t\t}\n\t\treturn fcn( x, y, z, w, v );\n\t}\n\n\t/**\n\t* Invokes a function accepting an arbitrary number of complex number input arguments.\n\t*\n\t* @private\n\t* @param {...(number|Complex)} args - input values\n\t* @returns {*} result\n\t*/\n\tfunction fcnN() {\n\t\tvar args;\n\t\tvar v;\n\t\tvar i;\n\n\t\targs = [];\n\t\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\t\tv = arguments[ i ];\n\t\t\tif ( typeof v === T ) {\n\t\t\t\tv = new ctor( v, 0.0 );\n\t\t\t}\n\t\t\targs.push( v );\n\t\t}\n\t\treturn fcn.apply( null, args );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = wrap;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Wrap a function accepting complex number arguments to support providing both real and complex numbers.\n*\n* @module @stdlib/complex/base/wrap-function\n*\n* @example\n* var Complex64 = require( '@stdlib/complex/float32' );\n* var caddf = require( '@stdlib/math/base/ops/caddf' );\n* var realf = require( '@stdlib/complex/realf' );\n* var imagf = require( '@stdlib/complex/imagf' );\n* var wrap = require( '@stdlib/complex/base/wrap-function' );\n*\n* var f = wrap( caddf, 2, Complex64 );\n*\n* // ...\n*\n* var z = f( 3.0, 4.0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 7.0\n*\n* var im = imagf( z );\n* // returns 0.0\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name cast\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/base/cast-return}\n*/\nsetReadOnly( ns, 'cast', require( './../../base/cast-return' ) );\n\n/**\n* @name wrap\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/base/wrap-function}\n*/\nsetReadOnly( ns, 'wrap', require( './../../base/wrap-function' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Serializes a complex number as a string.\n*\n* @private\n* @returns {string} serialized complex number\n*/\nfunction toString() { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar str = '' + this.re;\n\tif ( this.im < 0 ) {\n\t\tstr += ' - ' + (-this.im);\n\t} else {\n\t\tstr += ' + ' + this.im;\n\t}\n\tstr += 'i';\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = toString;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Serializes a complex number as a JSON object.\n*\n* @private\n* @returns {Object} JSON representation\n*/\nfunction toJSON() {\n\t/* eslint-disable no-invalid-this */\n\tvar out = {};\n\tout.type = 'Complex128';\n\tout.re = this.re;\n\tout.im = this.im;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = toJSON;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar defineProperty = require( '@stdlib/utils/define-property' );\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar format = require( '@stdlib/string/format' );\nvar toStr = require( './tostring.js' );\nvar toJSON = require( './tojson.js' );\n\n\n// MAIN //\n\n/**\n* 128-bit complex number constructor.\n*\n* @constructor\n* @param {number} real - real component\n* @param {number} imag - imaginary component\n* @throws {TypeError} must invoke using the `new` keyword\n* @throws {TypeError} real component must be a number\n* @throws {TypeError} imaginary component must be a number\n* @returns {Complex128} 128-bit complex number\n*\n* @example\n* var z = new Complex128( 5.0, 3.0 );\n* // returns <Complex128>\n*/\nfunction Complex128( real, imag ) {\n\tif ( !( this instanceof Complex128 ) ) {\n\t\tthrow new TypeError( 'invalid invocation. Constructor must be called with the `new` keyword.' );\n\t}\n\tif ( !isNumber( real ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Real component must be a number. Value: `%s`.', real ) );\n\t}\n\tif ( !isNumber( imag ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Imaginary component must be a number. Value: `%s`.', imag ) );\n\t}\n\tdefineProperty( this, 're', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'writable': false,\n\t\t'value': real\n\t});\n\tdefineProperty( this, 'im', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'writable': false,\n\t\t'value': imag\n\t});\n\treturn this;\n}\n\n/**\n* Size (in bytes) of each component.\n*\n* @name BYTES_PER_ELEMENT\n* @memberof Complex128\n* @type {integer}\n* @returns {integer} size of each component\n*\n* @example\n* var nbytes = Complex128.BYTES_PER_ELEMENT;\n* // returns 8\n*/\nsetReadOnly( Complex128, 'BYTES_PER_ELEMENT', 8 );\n\n/**\n* Size (in bytes) of each component.\n*\n* @name BYTES_PER_ELEMENT\n* @memberof Complex128.prototype\n* @type {integer}\n* @returns {integer} size of each component\n*\n* @example\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var nbytes = z.BYTES_PER_ELEMENT;\n* // returns 8\n*/\nsetReadOnly( Complex128.prototype, 'BYTES_PER_ELEMENT', 8 );\n\n/**\n* Length (in bytes) of a complex number.\n*\n* @name byteLength\n* @memberof Complex128.prototype\n* @type {integer}\n* @returns {integer} byte length\n*\n* @example\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var nbytes = z.byteLength;\n* // returns 16\n*/\nsetReadOnly( Complex128.prototype, 'byteLength', 16 );\n\n/**\n* Serializes a complex number as a string.\n*\n* @name toString\n* @memberof Complex128.prototype\n* @type {Function}\n* @returns {string} serialized complex number\n*\n* @example\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var str = z.toString();\n* // returns '5 + 3i'\n*/\nsetReadOnly( Complex128.prototype, 'toString', toStr );\n\n/**\n* Serializes a complex number as a JSON object.\n*\n* ## Notes\n*\n* -   `JSON.stringify()` implicitly calls this method when stringifying a `Complex128` instance.\n*\n* @name toJSON\n* @memberof Complex128.prototype\n* @type {Function}\n* @returns {Object} serialized complex number\n*\n* @example\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var obj = z.toJSON();\n* // returns { 'type': 'Complex128', 're': 5.0, 'im': 3.0 }\n*/\nsetReadOnly( Complex128.prototype, 'toJSON', toJSON );\n\n\n// EXPORTS //\n\nmodule.exports = Complex128;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* 128-bit complex number constructor.\n*\n* @module @stdlib/complex/float64\n*\n* @example\n* var Complex128 = require( '@stdlib/complex/float64' );\n*\n* var z = new Complex128( 5.0, 3.0 );\n* // returns <Complex128>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Serializes a complex number as a string.\n*\n* @private\n* @returns {string} serialized complex number\n*/\nfunction toString() { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar str = '' + this.re;\n\tif ( this.im < 0 ) {\n\t\tstr += ' - ' + (-this.im);\n\t} else {\n\t\tstr += ' + ' + this.im;\n\t}\n\tstr += 'i';\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = toString;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Serializes a complex number as a JSON object.\n*\n* @private\n* @returns {Object} JSON representation\n*/\nfunction toJSON() {\n\t/* eslint-disable no-invalid-this */\n\tvar out = {};\n\tout.type = 'Complex64';\n\tout.re = this.re;\n\tout.im = this.im;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = toJSON;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar defineProperty = require( '@stdlib/utils/define-property' );\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\nvar format = require( '@stdlib/string/format' );\nvar toStr = require( './tostring.js' );\nvar toJSON = require( './tojson.js' );\n\n\n// MAIN //\n\n/**\n* 64-bit complex number constructor.\n*\n* @constructor\n* @param {number} real - real component\n* @param {number} imag - imaginary component\n* @throws {TypeError} must invoke using the `new` keyword\n* @throws {TypeError} real component must be a number\n* @throws {TypeError} imaginary component must be a number\n* @returns {Complex64} 64-bit complex number\n*\n* @example\n* var z = new Complex64( 5.0, 3.0 );\n* // returns <Complex64>\n*/\nfunction Complex64( real, imag ) {\n\tif ( !( this instanceof Complex64 ) ) {\n\t\tthrow new TypeError( 'invalid invocation. Constructor must be called with the `new` keyword.' );\n\t}\n\tif ( !isNumber( real ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Real component must be a number. Value: `%s`.', real ) );\n\t}\n\tif ( !isNumber( imag ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Imaginary component must be a number. Value: `%s`.', imag ) );\n\t}\n\tdefineProperty( this, 're', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'writable': false,\n\t\t'value': float64ToFloat32( real )\n\t});\n\tdefineProperty( this, 'im', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'writable': false,\n\t\t'value': float64ToFloat32( imag )\n\t});\n\treturn this;\n}\n\n/**\n* Size (in bytes) of each component.\n*\n* @name BYTES_PER_ELEMENT\n* @memberof Complex64\n* @type {integer}\n* @returns {integer} size of each component\n*\n* @example\n* var nbytes = Complex64.BYTES_PER_ELEMENT;\n* // returns 4\n*/\nsetReadOnly( Complex64, 'BYTES_PER_ELEMENT', 4 );\n\n/**\n* Size (in bytes) of each component.\n*\n* @name BYTES_PER_ELEMENT\n* @memberof Complex64.prototype\n* @type {integer}\n* @returns {integer} size of each component\n*\n* @example\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var nbytes = z.BYTES_PER_ELEMENT;\n* // returns 4\n*/\nsetReadOnly( Complex64.prototype, 'BYTES_PER_ELEMENT', 4 );\n\n/**\n* Length (in bytes) of a complex number.\n*\n* @name byteLength\n* @memberof Complex64.prototype\n* @type {integer}\n* @returns {integer} byte length\n*\n* @example\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var nbytes = z.byteLength;\n* // returns 8\n*/\nsetReadOnly( Complex64.prototype, 'byteLength', 8 );\n\n/**\n* Serializes a complex number as a string.\n*\n* @name toString\n* @memberof Complex64.prototype\n* @type {Function}\n* @returns {string} serialized complex number\n*\n* @example\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var str = z.toString();\n* // returns '5 + 3i'\n*/\nsetReadOnly( Complex64.prototype, 'toString', toStr );\n\n/**\n* Serializes a complex number as a JSON object.\n*\n* ## Notes\n*\n* -   `JSON.stringify()` implicitly calls this method when stringifying a `Complex64` instance.\n*\n* @name toJSON\n* @memberof Complex64.prototype\n* @type {Function}\n* @returns {Object} serialized complex number\n*\n* @example\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var obj = z.toJSON();\n* // returns { 'type': 'Complex64', 're': 5.0, 'im': 3.0 }\n*/\nsetReadOnly( Complex64.prototype, 'toJSON', toJSON );\n\n\n// EXPORTS //\n\nmodule.exports = Complex64;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* 64-bit complex number constructor.\n*\n* @module @stdlib/complex/float32\n*\n* @example\n* var Complex64 = require( '@stdlib/complex/float32' );\n*\n* var z = new Complex64( 5.0, 3.0 );\n* // returns <Complex64>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Complex128 = require( './../../float64' );\nvar Complex64 = require( './../../float32' );\n\n\n// MAIN //\n\nvar CTORS = {\n\t'float64': Complex128,\n\t'float32': Complex64\n};\n\n\n// EXPORTS //\n\nmodule.exports = CTORS;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar format = require( '@stdlib/string/format' );\nvar CTORS = require( './ctors.js' );\n\n\n// MAIN //\n\n/**\n* Creates a complex number.\n*\n* @param {number} real - real component\n* @param {number} imag - imaginary component\n* @param {string} [dtype=\"float64\"] - data type\n* @throws {TypeError} must provide a recognized data type\n* @returns {Complex} complex number\n*\n* @example\n* var z = complex( 5.0, 3.0, 'float64' );\n* // returns <Complex128>\n*/\nfunction complex( real, imag, dtype ) {\n\tvar ctor;\n\tif ( arguments.length > 2 ) {\n\t\tctor = CTORS[ dtype ];\n\t\tif ( ctor ) {\n\t\t\treturn new ctor( real, imag );\n\t\t}\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a recognized data type. Value: `%s`.', dtype ) );\n\t}\n\treturn new CTORS[ 'float64' ]( real, imag );\n}\n\n\n// EXPORTS //\n\nmodule.exports = complex;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a complex number.\n*\n* @module @stdlib/complex/cmplx\n*\n* @example\n* var complex = require( '@stdlib/complex/cmplx' );\n*\n* var z = complex( 5.0, 3.0, 'float64' );\n* // returns <Complex128>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns the complex conjugate of a double-precision complex floating-point number.\n*\n* @param {Complex128} z - complex number\n* @returns {Complex128} complex conjugate\n*\n* @example\n* var Complex128 = require( '@stdlib/complex/float64' );\n* var real = require( '@stdlib/complex/real' );\n* var imag = require( '@stdlib/complex/imag' );\n*\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var v = conj( z );\n* // returns <Complex128>\n*\n* var re = real( v );\n* // returns 5.0\n*\n* var im = imag( v );\n* // returns -3.0\n*/\nfunction conj( z ) {\n\treturn new z.constructor( z.re, -z.im );\n}\n\n\n// EXPORTS //\n\nmodule.exports = conj;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return the complex conjugate of a double-precision complex floating-point number.\n*\n* @module @stdlib/complex/conj\n*\n* @example\n* var Complex128 = require( '@stdlib/complex/float64' );\n* var real = require( '@stdlib/complex/real' );\n* var imag = require( '@stdlib/complex/imag' );\n* var conj = require( '@stdlib/complex/conj' );\n*\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var v = conj( z );\n* // returns <Complex128>\n*\n* var re = real( v );\n* // returns 5.0\n*\n* var im = imag( v );\n* // returns -3.0\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns the complex conjugate of a single-precision complex floating-point number.\n*\n* @param {Complex64} z - complex number\n* @returns {Complex64} complex conjugate\n*\n* @example\n* var Complex64 = require( '@stdlib/complex/float32' );\n* var realf = require( '@stdlib/complex/realf' );\n* var imagf = require( '@stdlib/complex/imagf' );\n*\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var v = conjf( z );\n* // returns <Complex64>\n*\n* var re = realf( v );\n* // returns 5.0\n*\n* var im = imagf( v );\n* // returns -3.0\n*/\nfunction conjf( z ) {\n\treturn new z.constructor( z.re, -z.im );\n}\n\n\n// EXPORTS //\n\nmodule.exports = conjf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return the complex conjugate of a single-precision complex floating-point number.\n*\n* @module @stdlib/complex/conjf\n*\n* @example\n* var Complex64 = require( '@stdlib/complex/float32' );\n* var realf = require( '@stdlib/complex/realf' );\n* var imagf = require( '@stdlib/complex/imagf' );\n* var conjf = require( '@stdlib/complex/conjf' );\n*\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var v = conjf( z );\n* // returns <Complex64>\n*\n* var re = realf( v );\n* // returns 5.0\n*\n* var im = imagf( v );\n* // returns -3.0\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Complex64 = require( './../../float32' );\nvar Complex128 = require( './../../float64' );\n\n\n// MAIN //\n\n// Mapping from data types to constructors...\nvar ctors = {\n\t'complex64': Complex64,\n\t'complex128': Complex128\n};\n\n\n// EXPORTS //\n\nmodule.exports = ctors;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar table = require( './ctors.js' );\n\n\n// MAIN //\n\n/**\n* Returns a complex number constructor.\n*\n* @param {string} dtype - data type\n* @returns {(Function|null)} constructor or null\n*\n* @example\n* var ctor = ctors( 'complex128' );\n* // returns <Function>\n*\n* @example\n* var ctor = ctors( 'complex' );\n* // returns null\n*/\nfunction ctors( dtype ) {\n\treturn table[ dtype ] || null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ctors;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Complex number constructors.\n*\n* @module @stdlib/complex/ctors\n*\n* @example\n* var ctors = require( '@stdlib/complex/ctors' );\n*\n* var ctor = ctors( 'complex128' );\n* // returns <Function>\n*\n* ctor = ctors( 'int' );\n* // returns null\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n// Mapping from complex number constructors to data types...\nvar ctor2dtypes = {\n\t'Complex64': 'complex64',\n\t'Complex128': 'complex128'\n};\n\n\n// EXPORTS //\n\nmodule.exports = ctor2dtypes;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Complex64 = require( './../../float32' );\nvar Complex128 = require( './../../float64' );\n\n\n// MAIN //\n\n// Note: order should match `dtypes` order\nvar CTORS = [\n\tComplex64,\n\tComplex128\n];\n\n\n// EXPORTS //\n\nmodule.exports = CTORS;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n// Note: order should match `ctors` order\nvar DTYPES = [\n\t'complex64',\n\t'complex128'\n];\n\n\n// EXPORTS //\n\nmodule.exports = DTYPES;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constructorName = require( '@stdlib/utils/constructor-name' );\nvar ctor2dtype = require( './ctor2dtype.js' );\nvar CTORS = require( './ctors.js' );\nvar DTYPES = require( './dtypes.js' );\n\n\n// VARIABLES //\n\nvar NTYPES = DTYPES.length;\n\n\n// MAIN //\n\n/**\n* Returns the data type of a complex number.\n*\n* @param {*} value - input value\n* @returns {(string|null)} data type\n*\n* @example\n* var Complex128 = require( '@stdlib/complex/float64' );\n*\n* var dt = dtype( new Complex128( 1.0, 2.0 ) );\n* // returns 'complex128'\n*\n* var dt = dtype( 'beep' );\n* // returns null\n*/\nfunction dtype( value ) {\n\tvar i;\n\tfor ( i = 0; i < NTYPES; i++ ) {\n\t\tif ( value instanceof CTORS[ i ] ) {\n\t\t\treturn DTYPES[ i ];\n\t\t}\n\t}\n\t// If the above failed, fall back to a more robust (and significantly slower) means for resolving underlying data types:\n\treturn ctor2dtype[ constructorName( value ) ] || null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dtype;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return the data type of a complex number.\n*\n* @module @stdlib/complex/dtype\n*\n* @example\n* var Complex128 = require( '@stdlib/complex/float64' );\n* var dtype = require( '@stdlib/complex/dtype' );\n*\n* var v = new Complex128( 1.0, 2.0 );\n*\n* var dt = dtype( v );\n* // returns 'complex128'\n*\n* dt = dtype( {} );\n* // returns null\n*\n* dt = dtype( 'beep' );\n* // returns null\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "[\n\t\"complex64\",\n  \"complex128\"\n]\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar DTYPES = require( './dtypes.json' );\n\n\n// MAIN //\n\n/**\n* Returns a list of complex number data types.\n*\n* @returns {StringArray} list of complex number data types\n*\n* @example\n* var list = dtypes();\n* // e.g., returns [ 'complex64', 'complex128' ]\n*/\nfunction dtypes() {\n\treturn DTYPES.slice();\n}\n\n\n// EXPORTS //\n\nmodule.exports = dtypes;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a list of complex number data types.\n*\n* @module @stdlib/complex/dtypes\n*\n* @example\n* var dtypes = require( '@stdlib/complex/dtypes' );\n*\n* var list = dtypes();\n* // e.g., returns [ 'complex64', 'complex128' ]\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns the imaginary component of a double-precision complex floating-point number.\n*\n* @param {Complex} z - complex number\n* @returns {number} imaginary component\n*\n* @example\n* var Complex128 = require( '@stdlib/complex/float64' );\n*\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var im = imag( z );\n* // returns 3.0\n*/\nfunction imag( z ) {\n\treturn z.im;\n}\n\n\n// EXPORTS //\n\nmodule.exports = imag;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return the imaginary component of a double-precision complex floating-point number.\n*\n* @module @stdlib/complex/imag\n*\n* @example\n* var Complex128 = require( '@stdlib/complex/float64' );\n* var imag = require( '@stdlib/complex/imag' );\n*\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var im = imag( z );\n* // returns 3.0\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns the imaginary component of a single-precision complex floating-point number.\n*\n* @param {Complex} z - complex number\n* @returns {number} imaginary component\n*\n* @example\n* var Complex64 = require( '@stdlib/complex/float32' );\n*\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var im = imagf( z );\n* // returns 3.0\n*/\nfunction imagf( z ) {\n\treturn z.im;\n}\n\n\n// EXPORTS //\n\nmodule.exports = imagf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return the imaginary component of a single-precision complex floating-point number.\n*\n* @module @stdlib/complex/imagf\n*\n* @example\n* var Complex64 = require( '@stdlib/complex/float32' );\n* var imagf = require( '@stdlib/complex/imagf' );\n*\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var im = imagf( z );\n* // returns 3.0\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"float64\": {\n\t\t\"complex64\": \"complex128\",\n    \"complex128\": \"complex128\"\n\t},\n\t\"float32\": {\n\t\t\"complex64\": \"complex64\",\n    \"complex128\": \"complex128\"\n\t},\n\t\"int32\": {\n\t\t\"complex64\": \"complex128\",\n    \"complex128\": \"complex128\"\n\t},\n\t\"int16\": {\n\t\t\"complex64\": \"complex64\",\n    \"complex128\": \"complex128\"\n\t},\n\t\"int8\": {\n\t\t\"complex64\": \"complex64\",\n    \"complex128\": \"complex128\"\n\t},\n\t\"uint32\": {\n\t\t\"complex64\": \"complex128\",\n    \"complex128\": \"complex128\"\n\t},\n\t\"uint16\": {\n\t\t\"complex64\": \"complex64\",\n    \"complex128\": \"complex128\"\n\t},\n\t\"uint8\": {\n\t\t\"complex64\": \"complex64\",\n    \"complex128\": \"complex128\"\n\t},\n\t\"uint8c\": {\n\t\t\"complex64\": \"complex64\",\n    \"complex128\": \"complex128\"\n\t},\n  \"complex128\": {\n    \"float64\": \"complex128\",\n    \"float32\": \"complex128\",\n    \"int32\": \"complex128\",\n    \"int16\": \"complex128\",\n    \"int8\": \"complex128\",\n    \"uint32\": \"complex128\",\n    \"uint16\": \"complex128\",\n    \"uint8\": \"complex128\",\n    \"uint8c\": \"complex128\",\n    \"complex64\": \"complex128\",\n    \"complex128\": \"complex128\"\n  },\n  \"complex64\": {\n    \"float64\": \"complex128\",\n    \"float32\": \"complex64\",\n    \"int32\": \"complex128\",\n    \"int16\": \"complex64\",\n    \"int8\": \"complex64\",\n    \"uint32\": \"complex128\",\n    \"uint16\": \"complex64\",\n    \"uint8\": \"complex64\",\n    \"uint8c\": \"complex64\",\n    \"complex64\": \"complex64\",\n    \"complex128\": \"complex128\"\n  }\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar objectKeys = require( '@stdlib/utils/keys' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar PROMOTION_RULES = require( './promotion_rules.json' );\n\n\n// FUNCTIONS //\n\n/**\n* Generates a full table of promotion rules.\n*\n* @private\n* @returns {Object} table\n*/\nfunction generateFullTable() {\n\tvar dtypes;\n\tvar ntypes;\n\tvar out;\n\tvar tmp;\n\tvar dt1;\n\tvar dt2;\n\tvar o;\n\tvar j;\n\tvar i;\n\n\tout = {};\n\tdtypes = objectKeys( PROMOTION_RULES );\n\tntypes = dtypes.length;\n\tfor ( i = 0; i < ntypes; i++ ) {\n\t\tdt1 = dtypes[ i ];\n\t\to = PROMOTION_RULES[ dt1 ];\n\t\ttmp = {};\n\t\tfor ( j = 0; j < ntypes; j++ ) {\n\t\t\tdt2 = dtypes[ j ];\n\t\t\ttmp[ dt2 ] = o[ dt2 ];\n\t\t}\n\t\tout[ dt1 ] = tmp;\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Returns the complex number data type with the smallest size and closest \"kind\" to which data types can be safely cast.\n*\n* @param {string} [dtype1] - data type\n* @param {string} [dtype2] - data type\n* @returns {(Object|integer|string|null)} promotion rule(s) or null\n*\n* @example\n* var table = promotionRules();\n* // returns {...}\n*\n* @example\n* var dt = promotionRules( 'complex128', 'complex64' );\n* // returns 'complex128'\n*\n* @example\n* var dt = promotionRules( 'complex128', 'foo' );\n* // returns null\n*/\nfunction promotionRules( dtype1, dtype2 ) {\n\tvar o;\n\tif ( arguments.length === 0 ) {\n\t\treturn generateFullTable();\n\t}\n\tif ( hasOwnProp( PROMOTION_RULES, dtype1 ) ) {\n\t\to = PROMOTION_RULES[ dtype1 ];\n\t\tif ( hasOwnProp( o, dtype2 ) ) {\n\t\t\treturn o[ dtype2 ];\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = promotionRules;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return the complex number data type with the smallest size and closest \"kind\" to which data types can be safely cast.\n*\n* @module @stdlib/complex/promotion-rules\n*\n* @example\n* var promotionRules = require( '@stdlib/complex/promotion-rules' );\n*\n* var table = promotionRules();\n* // returns {...}\n*\n* var dt = promotionRules( 'complex128', 'complex64' );\n* // returns 'complex128'\n*\n* dt = promotionRules( 'complex128', 'foo' );\n* // returns null\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns the real component of a double-precision complex floating-point number.\n*\n* @param {Complex} z - complex number\n* @returns {number} real component\n*\n* @example\n* var Complex128 = require( '@stdlib/complex/float64' );\n*\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var re = real( z );\n* // returns 5.0\n*/\nfunction real( z ) {\n\treturn z.re;\n}\n\n\n// EXPORTS //\n\nmodule.exports = real;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return the real component of a double-precision complex floating-point number.\n*\n* @module @stdlib/complex/real\n*\n* @example\n* var Complex128 = require( '@stdlib/complex/float64' );\n* var real = require( '@stdlib/complex/real' );\n*\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var re = real( z );\n* // returns 5.0\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns the real component of a single-precision complex floating-point number.\n*\n* @param {Complex} z - complex number\n* @returns {number} real component\n*\n* @example\n* var Complex64 = require( '@stdlib/complex/float32' );\n*\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var re = realf( z );\n* // returns 5.0\n*/\nfunction realf( z ) {\n\treturn z.re;\n}\n\n\n// EXPORTS //\n\nmodule.exports = realf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return the real component of a single-precision complex floating-point number.\n*\n* @module @stdlib/complex/realf\n*\n* @example\n* var Complex64 = require( '@stdlib/complex/float32' );\n* var realf = require( '@stdlib/complex/realf' );\n*\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var re = realf( z );\n* // returns 5.0\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Float64Array = require( '@stdlib/array/float64' );\n\n\n// MAIN //\n\n/**\n* Returns the real and imaginary components of a double-precision complex floating-point number.\n*\n* @param {Complex128} z - complex number\n* @returns {Float64Array} real and imaginary components\n*\n* @example\n* var Complex128 = require( '@stdlib/complex/float64' );\n*\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var out = reim( z );\n* // returns <Float64Array>[ 5.0, 3.0 ]\n*/\nfunction reim( z ) {\n\tvar out = new Float64Array( 2 );\n\tout[ 0 ] = z.re;\n\tout[ 1 ] = z.im;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = reim;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return the real and imaginary components of a double-precision complex floating-point number.\n*\n* @module @stdlib/complex/reim\n*\n* @example\n* var Complex128 = require( '@stdlib/complex/float64' );\n* var reim = require( '@stdlib/complex/reim' );\n*\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var out = reim( z );\n* // returns <Float64Array>[ 5.0, 3.0 ]\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Float32Array = require( '@stdlib/array/float32' );\n\n\n// MAIN //\n\n/**\n* Returns the real and imaginary components of a single-precision complex floating-point number.\n*\n* @param {Complex64} z - complex number\n* @returns {Float32Array} real and imaginary components\n*\n* @example\n* var Complex64 = require( '@stdlib/complex/float32' );\n*\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var out = reimf( z );\n* // returns <Float32Array>[ 5.0, 3.0 ]\n*/\nfunction reimf( z ) {\n\tvar out = new Float32Array( 2 );\n\tout[ 0 ] = z.re;\n\tout[ 1 ] = z.im;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = reimf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return the real and imaginary components of a single-precision complex floating-point number.\n*\n* @module @stdlib/complex/reimf\n*\n* @example\n* var Complex64 = require( '@stdlib/complex/float32' );\n* var reimf = require( '@stdlib/complex/reimf' );\n*\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var out = reimf( z );\n* // returns <Float32Array>[ 5.0, 3.0 ]\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Complex128 = require( './../../float64' );\nvar Complex64 = require( './../../float32' );\n\n\n// MAIN //\n\nvar ctors = {\n\t'Complex128': Complex128,\n\t'Complex64': Complex64\n};\n\n\n// EXPORTS //\n\nmodule.exports = ctors;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar ctors = require( './ctors.js' );\n\n\n// MAIN //\n\n/**\n* Revives a JSON-serialized complex number.\n*\n* @param {string} key - key\n* @param {*} value - value\n* @returns {(*|Complex)} value or complex number\n*\n* @example\n* var parseJSON = require( '@stdlib/utils/parse-json' );\n*\n* var str = '{\"type\":\"Complex128\",\"re\":5,\"im\":3}';\n*\n* var z = parseJSON( str, reviveComplex );\n* // returns <Complex128>\n*/\nfunction reviveComplex( key, value ) {\n\tvar ctor;\n\tif (\n\t\tvalue &&\n\t\tvalue.type &&\n\t\tisNumber( value.re ) &&\n\t\tisNumber( value.im )\n\t) {\n\t\tctor = ctors[ value.type ];\n\t\tif ( ctor ) {\n\t\t\treturn new ctor( value.re, value.im );\n\t\t}\n\t}\n\treturn value;\n}\n\n\n// EXPORTS //\n\nmodule.exports = reviveComplex;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Revive a JSON-serialized complex number.\n*\n* @module @stdlib/complex/reviver\n*\n* @example\n* var parseJSON = require( '@stdlib/utils/parse-json' );\n* var reviveComplex = require( '@stdlib/complex/reviver' );\n*\n* var str = '{\"type\":\"Complex128\",\"re\":5,\"im\":3}';\n*\n* var z = parseJSON( str, reviveComplex );\n* // returns <Complex128>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar Complex64 = require( './../../float32' );\n\n\n// MAIN //\n\n/**\n* Revives a JSON-serialized 64-bit complex number.\n*\n* @param {string} key - key\n* @param {*} value - value\n* @returns {(*|Complex64)} value or 64-bit complex number\n*\n* @example\n* var parseJSON = require( '@stdlib/utils/parse-json' );\n*\n* var str = '{\"type\":\"Complex64\",\"re\":5,\"im\":3}';\n*\n* var z = parseJSON( str, reviveComplex64 );\n* // returns <Complex64>\n*/\nfunction reviveComplex64( key, value ) {\n\tif (\n\t\tvalue &&\n\t\tvalue.type &&\n\t\tvalue.type === 'Complex64' &&\n\t\tisNumber( value.re ) &&\n\t\tisNumber( value.im )\n\t) {\n\t\treturn new Complex64( value.re, value.im );\n\t}\n\treturn value;\n}\n\n\n// EXPORTS //\n\nmodule.exports = reviveComplex64;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Revive a JSON-serialized 64-bit complex number.\n*\n* @module @stdlib/complex/reviver-float32\n*\n* @example\n* var parseJSON = require( '@stdlib/utils/parse-json' );\n* var reviveComplex64 = require( '@stdlib/complex/reviver-float32' );\n*\n* var str = '{\"type\":\"Complex64\",\"re\":5,\"im\":3}';\n*\n* var z = parseJSON( str, reviveComplex64 );\n* // returns <Complex64>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar Complex128 = require( './../../float64' );\n\n\n// MAIN //\n\n/**\n* Revives a JSON-serialized 128-bit complex number.\n*\n* @param {string} key - key\n* @param {*} value - value\n* @returns {(*|Complex128)} value or 128-bit complex number\n*\n* @example\n* var parseJSON = require( '@stdlib/utils/parse-json' );\n*\n* var str = '{\"type\":\"Complex128\",\"re\":5,\"im\":3}';\n*\n* var z = parseJSON( str, reviveComplex128 );\n* // returns <Complex128>\n*/\nfunction reviveComplex128( key, value ) {\n\tif (\n\t\tvalue &&\n\t\tvalue.type &&\n\t\tvalue.type === 'Complex128' &&\n\t\tisNumber( value.re ) &&\n\t\tisNumber( value.im )\n\t) {\n\t\treturn new Complex128( value.re, value.im );\n\t}\n\treturn value;\n}\n\n\n// EXPORTS //\n\nmodule.exports = reviveComplex128;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Revive a JSON-serialized 128-bit complex number.\n*\n* @module @stdlib/complex/reviver-float64\n*\n* @example\n* var parseJSON = require( '@stdlib/utils/parse-json' );\n* var reviveComplex128 = require( '@stdlib/complex/reviver-float64' );\n*\n* var str = '{\"type\":\"Complex128\",\"re\":5,\"im\":3}';\n*\n* var z = parseJSON( str, reviveComplex128 );\n* // returns <Complex128>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name base\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/complex/base}\n*/\nsetReadOnly( ns, 'base', require( './../base' ) );\n\n/**\n* @name complex\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/cmplx}\n*/\nsetReadOnly( ns, 'complex', require( './../cmplx' ) );\n\n/**\n* @name conj\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/conj}\n*/\nsetReadOnly( ns, 'conj', require( './../conj' ) );\n\n/**\n* @name conjf\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/conjf}\n*/\nsetReadOnly( ns, 'conjf', require( './../conjf' ) );\n\n/**\n* @name complexCtors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/ctors}\n*/\nsetReadOnly( ns, 'complexCtors', require( './../ctors' ) );\n\n/**\n* @name complexDataType\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/dtype}\n*/\nsetReadOnly( ns, 'complexDataType', require( './../dtype' ) );\n\n/**\n* @name complexDataTypes\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/dtypes}\n*/\nsetReadOnly( ns, 'complexDataTypes', require( './../dtypes' ) );\n\n/**\n* @name Complex64\n* @memberof ns\n* @readonly\n* @constructor\n* @see {@link module:@stdlib/complex/float32}\n*/\nsetReadOnly( ns, 'Complex64', require( './../float32' ) );\n\n/**\n* @name Complex128\n* @memberof ns\n* @readonly\n* @constructor\n* @see {@link module:@stdlib/complex/float64}\n*/\nsetReadOnly( ns, 'Complex128', require( './../float64' ) );\n\n/**\n* @name imag\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/imag}\n*/\nsetReadOnly( ns, 'imag', require( './../imag' ) );\n\n/**\n* @name imagf\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/imagf}\n*/\nsetReadOnly( ns, 'imagf', require( './../imagf' ) );\n\n/**\n* @name complexPromotionRules\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/promotion-rules}\n*/\nsetReadOnly( ns, 'complexPromotionRules', require( './../promotion-rules' ) );\n\n/**\n* @name real\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/real}\n*/\nsetReadOnly( ns, 'real', require( './../real' ) );\n\n/**\n* @name realf\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/realf}\n*/\nsetReadOnly( ns, 'realf', require( './../realf' ) );\n\n/**\n* @name reim\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/reim}\n*/\nsetReadOnly( ns, 'reim', require( './../reim' ) );\n\n/**\n* @name reimf\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/reimf}\n*/\nsetReadOnly( ns, 'reimf', require( './../reimf' ) );\n\n/**\n* @name reviveComplex\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/reviver}\n*/\nsetReadOnly( ns, 'reviveComplex', require( './../reviver' ) );\n\n/**\n* @name reviveComplex64\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/reviver-float32}\n*/\nsetReadOnly( ns, 'reviveComplex64', require( './../reviver-float32' ) );\n\n/**\n* @name reviveComplex128\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/complex/reviver-float64}\n*/\nsetReadOnly( ns, 'reviveComplex128', require( './../reviver-float64' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n"],
  "mappings": "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",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isFunction", "isNonNegativeInteger", "format", "T", "wrap", "fcn", "nargs", "ctor", "fcns", "fcn0", "fcn1", "fcn2", "fcn3", "fcn4", "fcn5", "fcnN", "r", "x", "y", "z", "w", "v", "args", "i", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "isFunction", "isNonNegativeInteger", "format", "T", "wrap", "fcn", "nargs", "ctor", "fcns", "fcn0", "fcn1", "fcn2", "fcn3", "fcn4", "fcn5", "fcnN", "x", "y", "z", "w", "v", "args", "i", "require_lib", "__commonJSMin", "exports", "module", "main", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "ns", "require_tostring", "__commonJSMin", "exports", "module", "toString", "str", "require_tojson", "__commonJSMin", "exports", "module", "toJSON", "out", "require_main", "__commonJSMin", "exports", "module", "isNumber", "defineProperty", "setReadOnly", "format", "toStr", "toJSON", "Complex128", "real", "imag", "require_lib", "__commonJSMin", "exports", "module", "main", "require_tostring", "__commonJSMin", "exports", "module", "toString", "str", "require_tojson", "__commonJSMin", "exports", "module", "toJSON", "out", "require_main", "__commonJSMin", "exports", "module", "isNumber", "defineProperty", "setReadOnly", "float64ToFloat32", "format", "toStr", "toJSON", "Complex64", "real", "imag", "require_lib", "__commonJSMin", "exports", "module", "main", "require_ctors", "__commonJSMin", "exports", "module", "Complex128", "Complex64", "CTORS", "require_main", "__commonJSMin", "exports", "module", "format", "CTORS", "complex", "real", "imag", "dtype", "ctor", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "conj", "z", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "conjf", "z", "require_lib", "__commonJSMin", "exports", "module", "main", "require_ctors", "__commonJSMin", "exports", "module", "Complex64", "Complex128", "ctors", "require_main", "__commonJSMin", "exports", "module", "table", "ctors", "dtype", "require_lib", "__commonJSMin", "exports", "module", "main", "require_ctor2dtype", "__commonJSMin", "exports", "module", "ctor2dtypes", "require_ctors", "__commonJSMin", "exports", "module", "Complex64", "Complex128", "CTORS", "require_dtypes", "__commonJSMin", "exports", "module", "DTYPES", "require_main", "__commonJSMin", "exports", "module", "constructorName", "ctor2dtype", "CTORS", "DTYPES", "NTYPES", "dtype", "value", "i", "require_lib", "__commonJSMin", "exports", "module", "main", "require_dtypes", "__commonJSMin", "exports", "module", "require_main", "__commonJSMin", "exports", "module", "DTYPES", "dtypes", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "imag", "z", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "imagf", "z", "require_lib", "__commonJSMin", "exports", "module", "main", "require_promotion_rules", "__commonJSMin", "exports", "module", "require_main", "__commonJSMin", "exports", "module", "objectKeys", "hasOwnProp", "PROMOTION_RULES", "generateFullTable", "dtypes", "ntypes", "out", "tmp", "dt1", "dt2", "o", "j", "i", "promotionRules", "dtype1", "dtype2", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "real", "z", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "realf", "z", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "Float64Array", "reim", "z", "out", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "Float32Array", "reimf", "z", "out", "require_lib", "__commonJSMin", "exports", "module", "main", "require_ctors", "__commonJSMin", "exports", "module", "Complex128", "Complex64", "ctors", "require_main", "__commonJSMin", "exports", "module", "isNumber", "ctors", "reviveComplex", "key", "value", "ctor", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "isNumber", "Complex64", "reviveComplex64", "key", "value", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "isNumber", "Complex128", "reviveComplex128", "key", "value", "require_lib", "__commonJSMin", "exports", "module", "main", "setReadOnly", "ns"]
}
